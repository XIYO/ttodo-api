<context>
# Overview

This todo management application solves the problem of maintaining consistent productivity and habit formation by combining traditional task management with gamification and social accountability features. Unlike conventional todo apps that users abandon after initial enthusiasm wanes, our solution creates sustained engagement through experience points, achievement systems, and collaborative challenges.

The product targets individuals who struggle with maintaining routines, want to build habits with friends, and prefer game-like reward systems for motivation. This includes young professionals managing work-life balance, students coordinating study groups, and anyone seeking a more engaging approach to personal productivity.

The core value proposition lies in transforming mundane task completion into an engaging, social experience where users level up, earn titles, and achieve goals together with friends, making productivity feel less like a chore and more like a rewarding game.

# Core Features

## Todo Management with Repetition
- **What it does**: Allows creation of one-time and recurring tasks with customizable repeat patterns (daily, weekly, monthly, yearly) and priority levels
- **Why it's important**: Handles both single tasks and routine habits, eliminating the need to recreate recurring tasks manually
- **How it works**: Users create todos with optional repeat settings using RepeatType patterns; the system automatically generates virtual instances based on completion patterns and specified rules

## Member System with Profiles
- **What it does**: Provides JWT-based authentication, profile management with statistics, and member preferences
- **Why it's important**: Forms the foundation for all personalized features and gamification tracking
- **How it works**: Users register with email/password, create profiles with customizable settings, and have their progress tracked through the Profile and Statistics entities

## Experience Point and Level System
- **What it does**: Awards XP for completed tasks based on difficulty (TodoOriginal.experiencePoint), with automatic level progression
- **Why it's important**: Provides immediate positive feedback and long-term progression visibility
- **How it works**: Each todo completion grants XP stored in Profile entity; Level entity defines thresholds and titles for each level from 1-100

## Category and Tag Organization
- **What it does**: Enables hierarchical categorization and flexible tagging for todo items
- **Why it's important**: Allows users to organize tasks by project, area of life, or custom taxonomies
- **How it works**: Categories support parent-child relationships for nested organization; Tags provide flexible cross-category labeling

## Challenge System
- **What it does**: Time-bound competitions where users complete specific goals for bonus rewards
- **Why it's important**: Builds community engagement and provides competitive motivation
- **How it works**: Challenges define participation rules, track member progress through ChallengeParticipation, and award bonus XP upon completion

## Virtual Todo System
- **What it does**: Generates temporary instances of recurring todos without duplicating data
- **Why it's important**: Efficiently handles recurring tasks while maintaining single source of truth
- **How it works**: VirtualTodoService creates on-demand instances based on TodoOriginal repeat patterns, managing completion states separately

# User Experience

## User Personas

**Sarah Chen - Software Developer (29)**
- Wants to maintain coding practice outside work
- Uses priority levels to balance work and personal tasks
- Tracks experience points for motivation
- Organizes tasks with nested categories (Work/Projects/ClientA)

**Marcus Johnson - Graduate Student (24)**  
- Manages thesis deadlines with high-priority todos
- Uses repeat patterns for weekly research tasks
- Participates in study challenges with classmates
- Tags todos by subject for easy filtering

**Elena Rodriguez - Freelance Designer (31)**
- Creates categories for each client project
- Sets daily creative habit todos with RepeatType.DAILY
- Values the pinned todo feature for urgent tasks
- Tracks productivity through Statistics dashboard

## Key User Flows

**Todo Creation Flow**
1. Select category from hierarchical tree
2. Enter title and optional description
3. Set priority level (LOW/MEDIUM/HIGH)
4. Configure repeat pattern if recurring
5. Add relevant tags
6. Set experience points based on difficulty
7. Save and view in daily list

**Daily Dashboard Flow**
1. View today's todos including virtual instances
2. See pinned items at top regardless of priority
3. Filter by category, tag, or completion status
4. Complete todo with single action
5. Watch experience bar progress
6. Check updated statistics

**Challenge Participation Flow**
1. Browse active challenges
2. View challenge details and current participants
3. Join challenge
4. Complete challenge-specific todos
5. Track progress on leaderboard
6. Receive completion rewards

## UI/UX Considerations

- **RESTful API Design**: Clean endpoints following REST conventions with proper HTTP status codes
- **Swagger Documentation**: Interactive API documentation for all endpoints
- **Consistent Response Format**: Standardized error messages and data structures
- **Filtering and Pagination**: Comprehensive query parameters for todo lists
- **Security**: JWT-based authentication with Spring Security
- **Performance**: Optimized queries with proper JPA relationships
</context>
<PRD>
# Technical Architecture

## System Components

### Current Backend Stack
- **Language**: Java 21
- **Framework**: Spring Boot 3.x
- **Database**: PostgreSQL (via JPA/Hibernate)
- **Security**: Spring Security with JWT tokens
- **API Documentation**: SpringDoc OpenAPI (Swagger)
- **Build Tool**: Gradle
- **Testing**: JUnit 5, Spring Boot Test

### Package Structure
```
point.ttodoApi/
├── auth/           # Authentication & JWT handling
├── category/       # Category management
├── challenge/      # Challenge system
├── common/         # Shared utilities, config, exceptions
├── experience/     # Experience points & levels
├── member/         # Member management
├── profile/        # Profile & statistics
└── todo/           # Core todo functionality
```

## Data Models

### Core Entities

**Member** (auth.domain)
- id: UUID
- email: String (unique)
- password: String (encrypted)
- role: MemberRole (USER/ADMIN)
- createdAt/updatedAt: LocalDateTime
- Relations: One-to-One with Profile

**Profile** (profile.domain)
- id: ProfileId
- memberId: MemberId
- experiencePoint: Long
- Relations: One-to-One with Member, One-to-One with Statistics

**TodoOriginal** (todo.domain)
- id: TodoOriginalId  
- memberId: MemberId
- categoryId: CategoryId
- title: String
- memo: String
- priority: Priority (LOW/MEDIUM/HIGH)
- experiencePoint: Integer
- repeatType: RepeatType
- repeatEndDate: LocalDate
- Relations: Many-to-Many with Tags

**Category** (category.domain)
- id: CategoryId
- memberId: MemberId
- name: String
- parentId: CategoryId (self-reference)
- color: String
- displayOrder: Integer

**Challenge** (challenge.domain)
- id: ChallengeId
- title: String
- description: String
- startDate/endDate: LocalDate
- maxParticipants: Integer
- rewardExperience: Integer
- Relations: One-to-Many with ChallengeParticipation

**Level** (experience.domain)
- level: Integer (1-100)
- requiredExperience: Long
- title: String
- description: String

## APIs and Integrations

### RESTful Endpoints (Already Implemented)

**Authentication** (/auth)
- POST /auth/register
- POST /auth/login  
- POST /auth/refresh
- POST /auth/logout

**Todo Operations** (/todos)
- GET /todos - List with filtering
- POST /todos - Create new todo
- GET /todos/{id} - Get details
- PUT /todos/{id} - Full update
- PATCH /todos/{id} - Partial update
- DELETE /todos/{id} - Soft delete
- PUT /todos/{id}/pin - Toggle pin
- PATCH /todos/{id}/order - Update order
- GET /todos/monthly - Monthly view
- GET /todos/statistics - User statistics

**Category Management** (/categories)
- GET /categories - List user categories
- POST /categories - Create category
- PUT /categories/{id} - Update category
- DELETE /categories/{id} - Delete category
- PATCH /categories/reorder - Bulk reorder

**Challenge System** (/challenges)
- GET /challenges - List challenges
- POST /challenges - Create challenge
- GET /challenges/{id} - Get details
- POST /challenges/{id}/join - Join challenge
- GET /challenges/{id}/participants - List participants

**Supporting Endpoints**
- GET /priorities - Priority reference data
- GET /repeat-types - RepeatType reference
- GET /experiences/levels - Level progression
- GET /profiles/{id}/statistics - User statistics
- GET /tags/popular - Popular tags

### Service Layer Architecture
- **Application Services**: Handle business logic and orchestration
- **Domain Services**: Encapsulate domain rules
- **Infrastructure Services**: External integrations
- **Presentation Mappers**: DTO transformations

## Infrastructure Requirements

### Development Environment
- Java 21
- PostgreSQL 15+
- Redis (for future caching)
- Docker for containerization

### Production Considerations
- Spring Boot embedded Tomcat
- Database connection pooling (HikariCP)
- Structured logging with SLF4J
- Environment-based configuration
- Health check endpoints

# Development Roadmap

## MVP Phase (Core Functionality)
**Scope**: Essential features for a working todo application

### Already Implemented
- Member registration and JWT authentication
- Todo CRUD with priorities and categories
- Virtual todo system for recurring tasks
- Basic experience point tracking
- Category hierarchy management
- Tag system for organization
- RESTful API with Swagger documentation

### To Be Implemented
1. **Frontend Client** (Not in current scope)
   - Web interface using the REST API
   - Mobile-responsive design
   - Real-time updates

2. **Email Notifications**
   - Due date reminders
   - Challenge invitations
   - Achievement unlocks

3. **Data Validation Enhancements**
   - Business rule validations
   - Constraint checking
   - Error message localization

## Phase 2: Social Features
**Scope**: Enable collaboration and competition

### Features to Build
1. **Friend System**
   - Friend requests via MemberId
   - Friend list management
   - Privacy settings
   - Activity visibility controls

2. **Shared Todos**
   - Create todos with multiple assignees
   - Require consensus for completion
   - Progress tracking per member
   - Notification on updates

3. **Challenge Enhancements**
   - Private challenges for friend groups
   - Custom challenge rules
   - Progress milestones
   - Completion certificates

4. **Activity Feed**
   - Friend todo completions
   - Level-up announcements
   - Challenge participation
   - Achievement unlocks

## Phase 3: Advanced Gamification
**Scope**: Deepen engagement through achievements

### Features to Build
1. **Achievement System**
   - Define achievement criteria
   - Track progress automatically
   - Unlock notifications
   - Display on profile

2. **Streak Tracking**
   - Daily completion streaks
   - Category-specific streaks
   - Streak recovery mechanics
   - Bonus XP for streaks

3. **Advanced Statistics**
   - Completion trends
   - Productivity insights
   - Category analytics
   - Time-based patterns

4. **Leaderboards**
   - Global rankings
   - Friend rankings
   - Category-specific boards
   - Weekly/monthly resets

## Phase 4: Platform Expansion
**Scope**: Extend beyond single-user experience

### Features to Build
1. **Team Workspaces**
   - Shared categories
   - Team challenges
   - Role-based permissions
   - Team statistics

2. **Public Challenges**
   - Browse public challenges
   - Challenge templates
   - Sponsored challenges
   - Prize distribution

3. **API Rate Limiting**
   - User-based limits
   - Endpoint-specific rules
   - Usage analytics
   - Premium tiers

4. **Data Export/Import**
   - Export user data
   - Import from other apps
   - Backup functionality
   - GDPR compliance

# Logical Dependency Chain

## Foundation Layer (Current Implementation)
1. **Core Domain Models**
   - Member, Profile, TodoOriginal entities ✓
   - Category hierarchy system ✓
   - Tag management ✓
   - Experience/Level structure ✓

2. **Authentication & Security**
   - JWT token generation ✓
   - Spring Security configuration ✓
   - Role-based access control ✓
   - API endpoint protection ✓

3. **RESTful API Layer**
   - Todo CRUD operations ✓
   - Category management ✓
   - Virtual todo generation ✓
   - Swagger documentation ✓

## Enhancement Layer (Next Steps)
1. **Notification Service**
   - Requires: Member system
   - Enables: Reminders, alerts
   - Dependencies: Email service integration

2. **Friend Relationships**
   - Requires: Member profiles
   - Enables: Social features
   - Dependencies: Invitation system

3. **Challenge Participation**
   - Requires: Todo system, Member system
   - Enables: Competition features
   - Dependencies: Leaderboard calculation

## Social Layer
1. **Shared Todos**
   - Requires: Friend system
   - Enables: Collaboration
   - Dependencies: Multi-member todo tracking

2. **Activity Feeds**
   - Requires: Friend system, Event tracking
   - Enables: Social engagement
   - Dependencies: Event sourcing

3. **Team Features**
   - Requires: Shared todos, Permissions
   - Enables: Group productivity
   - Dependencies: Workspace management

## Advanced Layer
1. **Analytics Engine**
   - Requires: Historical data
   - Enables: Insights
   - Dependencies: Data warehouse

2. **Achievement System**
   - Requires: Event tracking
   - Enables: Long-term goals
   - Dependencies: Rule engine

3. **Public Platform**
   - Requires: All social features
   - Enables: Community
   - Dependencies: Moderation system

# Risks and Mitigations

## Technical Challenges

### Virtual Todo Complexity
- **Risk**: Complex date calculations for recurring patterns, especially with timezone handling
- **Mitigation**: Use Java Time API, comprehensive test coverage for edge cases, clear timezone handling strategy

### Performance at Scale
- **Risk**: Virtual todo generation becoming slow with many recurring tasks
- **Mitigation**: Implement caching layer, optimize queries with proper indexes, consider materialized views

### Concurrent Modifications  
- **Risk**: Race conditions in challenge participation, shared todos
- **Mitigation**: Use optimistic locking (@Version), implement proper transaction boundaries, design idempotent operations

### Data Consistency
- **Risk**: Statistics becoming out of sync with actual completions
- **Mitigation**: Event-driven updates, periodic reconciliation jobs, audit logging

## MVP Scope Risks

### Feature Completeness
- **Risk**: Current API-only approach may limit user adoption
- **Mitigation**: Clear API documentation, consider simple web UI, provide API client examples

### Mobile Experience
- **Risk**: No native mobile app in MVP
- **Mitigation**: Ensure API is mobile-friendly, plan for future mobile development, responsive web option

### User Onboarding
- **Risk**: Complex API may discourage new users
- **Mitigation**: Comprehensive Swagger docs, getting-started guide, example use cases

## Resource Constraints

### Development Resources
- **Risk**: Limited bandwidth for feature development
- **Mitigation**: Prioritize core features, modular architecture for incremental additions

### Testing Coverage
- **Risk**: Complex business rules may have gaps
- **Mitigation**: Automated testing strategy, unit + integration tests, test data generators

### Monitoring & Operations
- **Risk**: Limited visibility into production issues
- **Mitigation**: Implement logging standards, health checks, performance metrics

# Appendix

## Research Findings

### Competitor Analysis
- **Todoist**: Excellent recurring task handling - influenced our RepeatType design
- **Habitica**: Strong gamification - inspired our XP and level system
- **Microsoft To-Do**: Clean API design - influenced our REST endpoint structure
- **Any.do**: Category organization - influenced our hierarchical categories

### Technical Decisions
- **Why Spring Boot**: Mature ecosystem, excellent testing support, strong community
- **Why PostgreSQL**: JSONB support for flexible data, strong consistency, window functions for analytics
- **Why JWT**: Stateless authentication, mobile-friendly, standard implementation
- **Why Virtual Todos**: Avoids data duplication, simplifies recurring task modifications

## Technical Specifications

### Database Indexes (Recommended)
```sql
-- Performance critical indexes
CREATE INDEX idx_todo_member_date ON todo_original(member_id, created_at);
CREATE INDEX idx_todo_category ON todo_original(category_id);
CREATE INDEX idx_virtual_todo_date ON todo_original(repeat_end_date) WHERE repeat_type IS NOT NULL;
CREATE INDEX idx_category_hierarchy ON category(parent_id, display_order);
CREATE INDEX idx_challenge_active ON challenge(end_date) WHERE status = 'ACTIVE';
```

### API Design Principles
- RESTful conventions (GET, POST, PUT, PATCH, DELETE)
- Consistent URL patterns (/resource/{id}/action)
- Standard HTTP status codes
- JSON request/response bodies
- Pagination for list endpoints
- Filtering via query parameters

### Security Considerations
- BCrypt password hashing
- JWT token expiration (24 hours)
- Refresh token rotation
- Role-based access control
- API rate limiting (future)
- Input validation on all endpoints

### Performance Targets
- API response time: < 200ms average
- Todo list query: < 100ms
- Virtual todo generation: < 50ms per todo
- Database connection pool: 10-20 connections
- JVM heap: 512MB - 2GB

### Monitoring Metrics
- API endpoint latency
- Error rates by endpoint
- Daily active users
- Todos created per day
- Challenge participation rate
- Database query performance
</PRD>