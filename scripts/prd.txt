<context>
  <project-name>TTodo API</project-name>
  <project-type>Spring Boot REST API</project-type>
  <current-issues>
    밸리데이션 로직과 에러 처리가 체계적이지 못함. 일부 엔드포인트는 검증이 없고, 에러 응답 형식이 일관되지 않음.
  </current-issues>
</context>

<PRD>
# TTodo API 밸리데이션 및 에러 처리 개선 PRD

## 1. 프로젝트 개요

### 1.1 목적
TTodo API의 입력값 검증, 비즈니스 로직 검증, 에러 처리 체계를 전면 개선하여 API의 안정성과 보안성을 향상시킨다.

### 1.2 현재 상태
- 컨트롤러 레벨의 입력값 검증이 일부 누락됨
- 서비스 레이어의 비즈니스 로직 검증이 불완전함
- 에러 응답 형식이 일관되지 않음
- 예외 처리가 부족하거나 누락된 메서드들이 존재함
- 권한 검증(소유자/관리자) 체계가 미흡함

### 1.3 목표
- 모든 API 엔드포인트에 철저한 입력값 검증 구현
- 비즈니스 규칙 검증 체계 확립
- 일관된 에러 응답 형식 제공
- 포괄적인 예외 처리 구현
- 엄격한 권한 검증 시스템 구축

## 2. 기술 요구사항

### 2.1 검증 프레임워크
- Spring Validation (JSR-303/JSR-380) 활용
- 커스텀 밸리데이션 어노테이션 구현
- Cross-field validation 지원
- 최신 Jakarta Bean Validation 3.0 활용

### 2.2 에러 처리
- RFC 7807 Problem Details 표준 준수
- 도메인별 에러 코드 체계
- Log4j2를 활용한 구조화된 로깅

### 2.3 보안 고려사항
- XSS 방지를 위한 입력값 sanitization
- JPA Criteria API를 활용한 안전한 동적 쿼리
- 엄격한 권한 검증 (소유자/관리자)

## 3. 상세 구현 계획

### 3.1 컨트롤러 레벨 검증 강화

#### 3.1.1 AuthController
- **signUpAndIn 메서드 개선**
  - 이메일 형식 검증 강화 (RFC 5322 준수)
  - 패스워드 강도 검증 추가
    - 최소 8자 이상
    - 대소문자, 숫자, 특수문자 포함
    - 연속된 문자/숫자 제한
  - 닉네임 검증 추가
    - 길이: 2-20자
    - 허용 문자: 한글, 영문, 숫자, 일부 특수문자
    - 금지어 필터링

#### 3.1.2 MemberController
- **페이지네이션 파라미터 검증**
  - page: 0 이상
  - size: 1-100 범위
  - sort: 허용된 필드명만 가능 (화이트리스트)
  - 정렬 필드는 Criteria API를 통해 안전하게 처리
  
- **파일 업로드 검증**
  - 컨트롤러 레벨 파일 형식 검증
  - 파일 크기 제한 (5MB)
  - 파일명 sanitization

- **권한 검증**
  - 소유자(Owner) 또는 관리자(Admin)만 데이터 조회/수정 가능
  - @PreAuthorize 어노테이션 활용

#### 3.1.3 TodoController
- **날짜 관련 검증**
  - 날짜 범위 제한 (최대 1년)
  - 시작일이 종료일보다 이전인지 검증
  
- **검색 파라미터 검증**
  - 검색어 길이 제한 (최대 100자)
  - 특수문자 이스케이프 처리

- **반복 설정 검증**
  - 반복 주기 유효성
  - 반복 횟수 제한 (최대 365회)

#### 3.1.4 CategoryController
- **정렬 파라미터 검증**
  - 허용된 필드명만 정렬 가능 (화이트리스트)
  - JPA Criteria API를 통한 안전한 동적 쿼리 구성

#### 3.1.5 ChallengeController
- **페이지네이션 검증 일관성**
  - 모든 페이징 엔드포인트에 validatePaginationParams 적용

### 3.2 서비스 레벨 비즈니스 로직 검증

#### 3.2.1 검증 레이어 구조
```
- validators/
  - MemberValidator
  - TodoValidator
  - CategoryValidator
  - ChallengeValidator
```

#### 3.2.2 MemberService 검증
- **회원 생성 시**
  - 이메일 중복 검증
  - 닉네임 중복 검증 (대소문자 구분)
  - 프로필 정보 유효성 검증

- **회원 수정 시**
  - 변경 가능 필드 검증
  - 닉네임 변경 시 중복 검증 (대소문자 구분)
  - 소유자 본인만 수정 가능

#### 3.2.3 CategoryService 검증
- **카테고리 생성**
  - 카테고리명 중복 검증 (대소문자 구분)
  - 색상 코드 유효성 검증 (HEX 형식)
  - 사용자당 카테고리 수 제한 없음

- **카테고리 삭제**
  - 연관된 Todo 존재 여부 확인
  - 소유자만 삭제 가능

#### 3.2.4 TodoService 검증
- **Todo 생성**
  - 우선순위 값 범위 (1-5)
  - 태그 개수 제한 없음
  - 태그 길이 제한 없음
  - 반복 설정 논리적 검증

- **Todo 수정**
  - 완료된 Todo 수정 제한
  - 반복 Todo의 개별 수정 시 처리
  - 소유자만 수정 가능

#### 3.2.5 ChallengeService 검증
- **챌린지 생성**
  - 참가자 수 제한 없음
  - 챌린지 기간 제한 없음
  - 시작일 검증 (현재 시간 이후)

- **챌린지 참여**
  - 중복 참여 방지
  - 챌린지 상태 확인

### 3.3 에러 처리 체계 개선

#### 3.3.1 에러 코드 체계
```
- AUTH_001: 인증 실패
- AUTH_002: 권한 부족
- MEMBER_001: 회원 정보 없음
- MEMBER_002: 중복된 이메일
- TODO_001: Todo 없음
- TODO_002: 유효하지 않은 반복 설정
- CATEGORY_001: 카테고리 없음
- CATEGORY_002: 카테고리 수 초과
- CHALLENGE_001: 챌린지 없음
- CHALLENGE_002: 참가자 수 초과
```

#### 3.3.2 에러 응답 형식
```json
{
  "type": "/errors/member-not-found",
  "title": "Member Not Found",
  "status": 404,
  "detail": "회원을 찾을 수 없습니다.",
  "instance": "/members/123",
  "errorCode": "MEMBER_001",
  "timestamp": "2024-01-14T10:30:00Z",
  "traceId": "abc123"
}
```

#### 3.3.3 예외 처리 전략
- **컨트롤러 어드바이스 확장**
  - 도메인별 예외 핸들러 구현
  - 검증 실패 시 상세 정보 제공
  - 로깅 레벨 세분화

- **서비스 레이어 예외**
  - BusinessException 서브클래스 생성
  - 도메인별 커스텀 예외 정의
  - 예외 체인 관리

### 3.4 추가 보안 강화

#### 3.4.1 입력값 Sanitization
- **XSS 방지**
  - HTML 태그 제거
  - JavaScript 코드 필터링
  - 특수문자 이스케이프

#### 3.4.2 권한 기반 접근 제어
- **소유자/관리자 검증**
  - @PreAuthorize를 활용한 메서드 레벨 보안
  - 소유자(isOwner) 검증 로직 구현
  - 관리자 권한 체크
  - 리소스별 접근 권한 매트릭스 정의

#### 3.4.3 감사 로그
- **주요 작업 로깅**
  - 로그인/로그아웃
  - 데이터 생성/수정/삭제
  - 권한 변경
  - 에러 발생
  - Log4j2 구조화된 로깅 활용

### 3.5 테스트 전략

#### 3.5.1 단위 테스트
- 각 밸리데이터 클래스 테스트
- 에러 핸들러 테스트
- 커스텀 어노테이션 테스트

#### 3.5.2 통합 테스트
- 엔드포인트별 검증 테스트
- 에러 시나리오 테스트
- 보안 테스트

#### 3.5.3 부하 테스트
- 동시성 이슈 테스트
- 대용량 데이터 처리 테스트

## 4. 구현 우선순위

### Phase 1 (긴급)
1. 권한 검증 시스템 구축 (소유자/관리자)
2. AuthController 패스워드/이메일 검증
3. 파일 업로드 보안 검증
4. XSS 방지

### Phase 2 (중요)
1. JPA Criteria API 기반 동적 쿼리 구현
2. 페이지네이션 검증
3. 비즈니스 로직 검증 레이어
4. 에러 코드 체계 구축
5. 일관된 에러 응답

### Phase 3 (개선)
1. Log4j2 기반 감사 로그
2. 성능 최적화
3. 메이저 라이브러리 활용한 코드 간소화

## 5. 성공 지표

### 5.1 기술적 지표
- 모든 API 엔드포인트 검증 커버리지 100%
- 에러 응답 형식 일관성 100%
- 보안 취약점 0건

### 5.2 운영 지표
- API 에러율 50% 감소
- 잘못된 요청으로 인한 서버 부하 감소
- 디버깅 시간 30% 단축

## 6. 위험 요소 및 대응

### 6.1 기존 클라이언트 호환성
- 단계적 마이그레이션
- API 버전 관리
- 충분한 전환 기간 제공

### 6.2 성능 영향
- 검증 로직 최적화
- 캐싱 전략 수립
- 비동기 처리 고려

### 6.3 개발 복잡도 증가
- 명확한 가이드라인 제공
- 재사용 가능한 컴포넌트 개발
- 팀 교육 실시

## 7. 타임라인

- **Week 1-2**: Phase 1 구현 (보안 critical 이슈)
- **Week 3-4**: Phase 2 구현 (검증 체계 구축)
- **Week 5-6**: Phase 3 구현 (추가 개선사항)
- **Week 7**: 통합 테스트 및 문서화
- **Week 8**: 배포 및 모니터링

## 8. 참고사항

### 8.1 관련 표준
- RFC 7807 (Problem Details for HTTP APIs)
- OWASP Top 10
- Spring Security Best Practices

### 8.2 참고 구현
- Spring Boot Starter Validation
- Hibernate Validator
- Apache Commons Validator

### 8.3 도구 및 라이브러리
- OWASP Java HTML Sanitizer
- Log4j2 (Structured Logging)
- Apache Commons Lang3 (유틸리티)
- Guava (캐싱 및 유틸리티)
- ModelMapper/MapStruct (객체 매핑)
</PRD>