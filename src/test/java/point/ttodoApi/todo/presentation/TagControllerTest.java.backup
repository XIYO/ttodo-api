package point.zzicback.todo.presentation;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureTestDatabase;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.security.test.context.support.WithUserDetails;
import org.springframework.test.context.TestPropertySource;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.context.WebApplicationContext;
import point.zzicback.category.domain.Category;
import point.zzicback.category.infrastructure.CategoryRepository;
import point.zzicback.member.domain.Member;
import point.zzicback.member.infrastructure.persistence.MemberRepository;
import point.zzicback.todo.domain.TodoOriginal;
import point.zzicback.todo.infrastructure.persistence.TodoOriginalRepository;

import java.time.LocalDate;
import java.util.List;

import static org.springframework.security.test.web.servlet.setup.SecurityMockMvcConfigurers.springSecurity;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@SpringBootTest
@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)
@TestPropertySource(locations = "classpath:application-test.yml")
@Transactional
@DisplayName("TagController 통합 테스트")
public class TagControllerTest {

    @Autowired
    private WebApplicationContext context;

    @Autowired
    private ObjectMapper objectMapper;

    @Autowired
    private MemberRepository memberRepository;

    @Autowired
    private TodoOriginalRepository todoOriginalRepository;

    @Autowired
    private CategoryRepository categoryRepository;

    private MockMvc mockMvc;
    private Member testMember;
    private Category testCategory;

    @BeforeEach
    void setUp() {
        mockMvc = MockMvcBuilders.webAppContextSetup(context)
                .apply(springSecurity())
                .build();

        // 테스트용 회원 생성
        testMember = memberRepository.findByEmail("anon@zzic.com")
                .orElseThrow(() -> new RuntimeException("Test member not found"));

        // 테스트용 카테고리 생성
        testCategory = Category.builder()
                .name("테스트 카테고리")
                .member(testMember)
                .build();
        testCategory = categoryRepository.save(testCategory);
    }

    @Nested
    @DisplayName("태그 조회 테스트")
    class GetTagsTest {

        @Test
        @WithUserDetails("anon@zzic.com")
        @DisplayName("태그 목록 조회 성공")
        void getTagsSuccess() throws Exception {
            // 태그가 포함된 Todo 생성
            TodoOriginal todo1 = TodoOriginal.builder()
                    .title("첫 번째 할일")
                    .member(testMember)
                    .category(testCategory)
                    .tags(List.of("개발", "학습", "자바"))
                    .date(LocalDate.now())
                    .priorityId(1)
                    .repeatType(0)
                    .build();

            TodoOriginal todo2 = TodoOriginal.builder()
                    .title("두 번째 할일")
                    .member(testMember)
                    .category(testCategory)
                    .tags(List.of("운동", "학습", "건강"))
                    .date(LocalDate.now())
                    .priorityId(2)
                    .repeatType(0)
                    .build();

            todoOriginalRepository.save(todo1);
            todoOriginalRepository.save(todo2);

            // 태그 목록 조회
            mockMvc.perform(get("/tags")
                            .param("page", "0")
                            .param("size", "10")
                            .param("direction", "asc"))
                    .andExpect(status().isOk())
                    .andExpect(jsonPath("$.content").isArray())
                    .andExpect(jsonPath("$.content.length()").value(4)) // 개발, 건강, 자바, 학습, 운동 (중복 제거)
                    .andExpect(jsonPath("$.totalElements").value(4))
                    .andExpect(jsonPath("$.first").value(true))
                    .andExpect(jsonPath("$.last").value(true));
        }

        @Test
        @WithUserDetails("anon@zzic.com")
        @DisplayName("카테고리 필터링된 태그 조회 성공")
        void getTagsWithCategoryFilterSuccess() throws Exception {
            // 다른 카테고리 생성
            Category anotherCategory = Category.builder()
                    .name("다른 카테고리")
                    .member(testMember)
                    .build();
            anotherCategory = categoryRepository.save(anotherCategory);

            // 카테고리별 Todo 생성
            TodoOriginal todo1 = TodoOriginal.builder()
                    .title("첫 번째 할일")
                    .member(testMember)
                    .category(testCategory)
                    .tags(List.of("개발", "학습"))
                    .date(LocalDate.now())
                    .priorityId(1)
                    .repeatType(0)
                    .build();

            TodoOriginal todo2 = TodoOriginal.builder()
                    .title("두 번째 할일")
                    .member(testMember)
                    .category(anotherCategory)
                    .tags(List.of("운동", "건강"))
                    .date(LocalDate.now())
                    .priorityId(2)
                    .repeatType(0)
                    .build();

            todoOriginalRepository.save(todo1);
            todoOriginalRepository.save(todo2);

            // 특정 카테고리의 태그만 조회
            mockMvc.perform(get("/tags")
                            .param("categoryIds", testCategory.getId().toString())
                            .param("page", "0")
                            .param("size", "10")
                            .param("direction", "asc"))
                    .andExpect(status().isOk())
                    .andExpect(jsonPath("$.content").isArray())
                    .andExpect(jsonPath("$.content.length()").value(2)) // 개발, 학습만
                    .andExpect(jsonPath("$.totalElements").value(2));
        }

        @Test
        @WithUserDetails("anon@zzic.com")
        @DisplayName("페이지네이션 테스트")
        void getTagsWithPaginationSuccess() throws Exception {
            // 많은 태그를 가진 Todo 생성
            TodoOriginal todo = TodoOriginal.builder()
                    .title("태그가 많은 할일")
                    .member(testMember)
                    .category(testCategory)
                    .tags(List.of("태그1", "태그2", "태그3", "태그4", "태그5", "태그6"))
                    .date(LocalDate.now())
                    .priorityId(1)
                    .repeatType(0)
                    .build();

            todoOriginalRepository.save(todo);

            // 첫 번째 페이지 (크기 3)
            mockMvc.perform(get("/tags")
                            .param("page", "0")
                            .param("size", "3")
                            .param("direction", "asc"))
                    .andExpect(status().isOk())
                    .andExpect(jsonPath("$.content").isArray())
                    .andExpect(jsonPath("$.content.length()").value(3))
                    .andExpect(jsonPath("$.totalElements").value(6))
                    .andExpect(jsonPath("$.totalPages").value(2))
                    .andExpect(jsonPath("$.first").value(true))
                    .andExpect(jsonPath("$.last").value(false));

            // 두 번째 페이지
            mockMvc.perform(get("/tags")
                            .param("page", "1")
                            .param("size", "3")
                            .param("direction", "asc"))
                    .andExpect(status().isOk())
                    .andExpect(jsonPath("$.content").isArray())
                    .andExpect(jsonPath("$.content.length()").value(3))
                    .andExpect(jsonPath("$.totalElements").value(6))
                    .andExpect(jsonPath("$.totalPages").value(2))
                    .andExpect(jsonPath("$.first").value(false))
                    .andExpect(jsonPath("$.last").value(true));
        }

        @Test
        @WithUserDetails("anon@zzic.com")
        @DisplayName("정렬 테스트 - 내림차순")
        void getTagsWithDescendingSortSuccess() throws Exception {
            // 태그가 포함된 Todo 생성
            TodoOriginal todo = TodoOriginal.builder()
                    .title("정렬 테스트 할일")
                    .member(testMember)
                    .category(testCategory)
                    .tags(List.of("A태그", "C태그", "B태그"))
                    .date(LocalDate.now())
                    .priorityId(1)
                    .repeatType(0)
                    .build();

            todoOriginalRepository.save(todo);

            // 내림차순 정렬
            mockMvc.perform(get("/tags")
                            .param("direction", "desc"))
                    .andExpect(status().isOk())
                    .andExpect(jsonPath("$.content").isArray())
                    .andExpect(jsonPath("$.content[0]").value("C태그"))
                    .andExpect(jsonPath("$.content[1]").value("B태그"))
                    .andExpect(jsonPath("$.content[2]").value("A태그"));
        }

        @Test
        @WithUserDetails("anon@zzic.com")
        @DisplayName("태그가 없는 경우 빈 목록 반환")
        void getTagsEmptyWhenNoTags() throws Exception {
            // 태그가 없는 Todo 생성
            TodoOriginal todo = TodoOriginal.builder()
                    .title("태그 없는 할일")
                    .member(testMember)
                    .category(testCategory)
                    .date(LocalDate.now())
                    .priorityId(1)
                    .repeatType(0)
                    .build();

            todoOriginalRepository.save(todo);

            // 태그 목록 조회
            mockMvc.perform(get("/tags"))
                    .andExpect(status().isOk())
                    .andExpect(jsonPath("$.content").isArray())
                    .andExpect(jsonPath("$.content.length()").value(0))
                    .andExpect(jsonPath("$.totalElements").value(0))
                    .andExpect(jsonPath("$.empty").value(true));
        }
    }

    @Nested
    @DisplayName("인증 및 권한 테스트")
    class AuthAndValidationTest {

        @Test
        @DisplayName("인증되지 않은 사용자의 태그 조회 시도")
        void getTagsWithoutAuthenticationFails() throws Exception {
            mockMvc.perform(get("/tags"))
                    .andExpect(status().isUnauthorized());
        }

        @Test
        @WithUserDetails("anon@zzic.com")
        @DisplayName("잘못된 페이지네이션 파라미터")
        void getTagsWithInvalidPaginationParams() throws Exception {
            // 음수 페이지
            mockMvc.perform(get("/tags")
                            .param("page", "-1"))
                    .andExpect(status().isBadRequest());

            // 음수 크기
            mockMvc.perform(get("/tags")
                            .param("size", "-1"))
                    .andExpect(status().isBadRequest());
        }

        @Test
        @WithUserDetails("anon@zzic.com")
        @DisplayName("잘못된 정렬 방향")
        void getTagsWithInvalidSortDirection() throws Exception {
            // 잘못된 정렬 방향은 기본값(asc)으로 처리됨
            mockMvc.perform(get("/tags")
                            .param("direction", "invalid"))
                    .andExpect(status().isOk());
        }
    }
}