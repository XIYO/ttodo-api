package point.zzicback.challenge.presentation;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.http.HttpStatus;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.*;
import point.zzicback.auth.domain.MemberPrincipal;
import point.zzicback.challenge.application.ChallengeTodoService;
import point.zzicback.challenge.presentation.dto.request.CreateTodoRequest;
import point.zzicback.challenge.presentation.dto.request.UpdateTodoRequest;
import point.zzicback.challenge.presentation.dto.response.ChallengeTodoResponse;
import point.zzicback.challenge.presentation.mapper.ChallengeTodoPresentationMapper;
import point.zzicback.member.application.MemberService;
import point.zzicback.member.domain.Member;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

/**
 * 챌린지 투두 관련 API 컨트롤러
 */
@Tag(name = "챌린지 투두", description = "챌린지 투두 관련 API")
@RestController
@RequiredArgsConstructor
public class ChallengeTodoController {
    
    private final ChallengeTodoService todoService;
    private final MemberService memberService;
    private final ChallengeTodoPresentationMapper todoMapper;

    @Operation(summary = "사용자의 모든 챌린지 투두 조회", description = "사용자의 모든 챌린지 투두 내역을 조회합니다.")
    @ApiResponse(responseCode = "200", description = "챌린지 투두 목록 조회 성공")
    @GetMapping("/challenges/todos")
    public Page<ChallengeTodoResponse> getAllChallengeTodos(
            @AuthenticationPrincipal MemberPrincipal principal,
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size,
            @RequestParam(defaultValue = "id,desc") String sort) {
        Member member = memberService.findVerifiedMember(principal.id());
        Pageable pageable = createPageable(page, size, sort);
        return todoService.getAllChallengeTodos(member, pageable)
                .map(todoMapper::toResponse);
    }

    @Operation(summary = "특정 챌린지의 투두 목록 조회", description = "특정 챌린지의 모든 투두를 조회합니다.")
    @ApiResponse(responseCode = "200", description = "투두 목록 조회 성공")
    @GetMapping("/challenges/{challengeId}/todos")
    public Page<ChallengeTodoResponse> getChallengeTodos(
            @PathVariable Long challengeId,
            @AuthenticationPrincipal MemberPrincipal principal,
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size) {
        Member member = memberService.findVerifiedMember(principal.id());
        Pageable pageable = PageRequest.of(page, size);
        return todoService.getChallengeTodosByChallenge(challengeId, member, pageable)
                .map(todoMapper::toResponse);
    }

    @Operation(summary = "챌린지 투두 생성", description = "챌린지에 새로운 투두를 생성합니다. (관리자만 가능)")
    @ApiResponse(responseCode = "201", description = "투두 생성 성공")
    @ApiResponse(responseCode = "403", description = "관리자 권한 필요")
    @PostMapping("/challenges/{challengeId}/todos")
    @ResponseStatus(HttpStatus.CREATED)
    @PreAuthorize("@challengeService.isOwner(#challengeId, authentication.principal.id)")
    public ChallengeTodoResponse createTodo(
            @PathVariable Long challengeId,
            @Valid @RequestBody CreateTodoRequest request,
            @AuthenticationPrincipal MemberPrincipal principal) {
        Member member = memberService.findVerifiedMember(principal.id());
        // TODO: 투두 생성 로직 구현 필요
        // var todo = todoService.createTodo(challengeId, request, member);
        // return todoMapper.toResponse(todo);
        throw new UnsupportedOperationException("투두 생성 기능은 아직 구현되지 않았습니다.");
    }

    @Operation(summary = "챌린지 투두 수정", description = "챌린지 투두를 수정합니다. (관리자만 가능)")
    @ApiResponse(responseCode = "200", description = "투두 수정 성공")
    @ApiResponse(responseCode = "403", description = "관리자 권한 필요")
    @PatchMapping("/challenges/{challengeId}/todos/{todoId}")
    @PreAuthorize("@challengeService.isOwner(#challengeId, authentication.principal.id)")
    public ChallengeTodoResponse updateTodo(
            @PathVariable Long challengeId,
            @PathVariable Long todoId,
            @Valid @RequestBody UpdateTodoRequest request,
            @AuthenticationPrincipal MemberPrincipal principal) {
        Member member = memberService.findVerifiedMember(principal.id());
        // TODO: 투두 수정 로직 구현 필요
        // var todo = todoService.updateTodo(todoId, request, member);
        // return todoMapper.toResponse(todo);
        throw new UnsupportedOperationException("투두 수정 기능은 아직 구현되지 않았습니다.");
    }

    @Operation(summary = "챌린지 투두 삭제", description = "챌린지 투두를 삭제합니다. (관리자만 가능)")
    @ApiResponse(responseCode = "204", description = "투두 삭제 성공")
    @ApiResponse(responseCode = "403", description = "관리자 권한 필요")
    @DeleteMapping("/challenges/{challengeId}/todos/{todoId}")
    @ResponseStatus(HttpStatus.NO_CONTENT)
    @PreAuthorize("@challengeService.isOwner(#challengeId, authentication.principal.id)")
    public void deleteTodo(
            @PathVariable Long challengeId,
            @PathVariable Long todoId,
            @AuthenticationPrincipal MemberPrincipal principal) {
        Member member = memberService.findVerifiedMember(principal.id());
        // TODO: 투두 삭제 로직 구현 필요
        // todoService.deleteTodo(todoId, member);
        throw new UnsupportedOperationException("투두 삭제 기능은 아직 구현되지 않았습니다.");
    }

    @Operation(summary = "챌린지 투두 완료 처리", description = "특정 챌린지 투두를 완료 상태로 변경합니다.")
    @ApiResponse(responseCode = "200", description = "챌린지 투두 완료 성공")
    @PostMapping("/challenges/{challengeId}/todos/{todoId}/complete")
    public ChallengeTodoResponse completeChallengeTodo(
            @PathVariable Long challengeId,
            @PathVariable Long todoId,
            @AuthenticationPrincipal MemberPrincipal principal) {
        Member member = memberService.findVerifiedMember(principal.id());
        todoService.completeChallenge(challengeId, member, LocalDate.now());
        var todoResult = todoService.getChallengeTodoByChallenge(challengeId, member, LocalDate.now());
        return todoMapper.toResponse(todoResult);
    }

    @Operation(summary = "챌린지 투두 완료 취소", description = "특정 챌린지 투두의 완료를 취소합니다.")
    @ApiResponse(responseCode = "204", description = "챌린지 투두 완료 취소 성공")
    @DeleteMapping("/challenges/{challengeId}/todos/{todoId}/complete")
    @ResponseStatus(HttpStatus.NO_CONTENT)
    public void cancelChallengeTodo(
            @PathVariable Long challengeId,
            @PathVariable Long todoId,
            @AuthenticationPrincipal MemberPrincipal principal) {
        Member member = memberService.findVerifiedMember(principal.id());
        todoService.cancelCompleteChallenge(todoId, member);
    }

    private Pageable createPageable(int page, int size, String sort) {
        if (size > 100) {
            throw new IllegalArgumentException("페이지 크기는 100 이하여야 합니다");
        }
        
        String[] sortParams = sort.split(",");
        String sortBy = sortParams[0];
        Sort.Direction direction = sortParams.length > 1 && "desc".equalsIgnoreCase(sortParams[1])
                ? Sort.Direction.DESC
                : Sort.Direction.ASC;

        List<String> allowedSortFields = Arrays.asList("id", "createdAt", "updatedAt", "completedAt");
        if (!allowedSortFields.contains(sortBy)) {
            throw new IllegalArgumentException("허용되지 않은 정렬 필드입니다: " + sortBy);
        }

        return PageRequest.of(page, size, Sort.by(direction, sortBy));
    }
}