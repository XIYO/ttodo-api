package point.zzicback.challenge.presentation;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.*;
import point.zzicback.auth.domain.MemberPrincipal;
import point.zzicback.challenge.application.ChallengeParticipationService;
import point.zzicback.challenge.application.dto.result.ParticipantResult;
import point.zzicback.challenge.presentation.dto.request.JoinByInviteRequest;
import point.zzicback.challenge.presentation.dto.response.ParticipantResponse;
import point.zzicback.challenge.presentation.mapper.ChallengePresentationMapper;
import point.zzicback.member.application.MemberService;
import point.zzicback.member.domain.Member;

import java.util.UUID;

/**
 * 챌린지 참여 관련 API 컨트롤러
 */
@Tag(name = "챌린지 참여", description = "챌린지 참여/탈퇴 관련 API")
@RestController
@RequiredArgsConstructor
public class ParticipationController {
    
    private final ChallengeParticipationService participationService;
    private final MemberService memberService;
    private final ChallengePresentationMapper challengePresentationMapper;

    @Operation(summary = "챌린지 참여자 목록 조회", description = "특정 챌린지의 참여자 목록을 조회합니다.")
    @ApiResponse(responseCode = "200", description = "참여자 목록 조회 성공")
    @GetMapping("/challenges/{challengeId}/participants")
    public Page<ParticipantResponse> getParticipants(
            @PathVariable Long challengeId,
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size) {
        Pageable pageable = PageRequest.of(page, size);
        Page<ParticipantResult> pageDto = participationService.getParticipants(challengeId, pageable);
        return pageDto.map(challengePresentationMapper::toResponse);
    }

    @Operation(summary = "특정 멤버 참여 상태 조회", description = "특정 멤버의 챌린지 참여 상태를 조회합니다.")
    @ApiResponse(responseCode = "200", description = "참여 상태 조회 성공")
    @ApiResponse(responseCode = "404", description = "참여하지 않은 챌린지")
    @GetMapping("/challenges/{challengeId}/participants/{memberId}")
    @PreAuthorize("#memberId == authentication.principal.id or hasRole('ADMIN') or @challengeService.isOwner(#challengeId, authentication.principal.id)")
    public ParticipantResponse getParticipant(
            @PathVariable Long challengeId,
            @PathVariable UUID memberId) {
        var participation = participationService.getParticipation(challengeId, memberId);
        var dto = challengePresentationMapper.toParticipantResult(participation);
        return challengePresentationMapper.toResponse(dto);
    }

    @Operation(summary = "챌린지 참여", description = "특정 챌린지에 참여합니다.")
    @ApiResponse(responseCode = "201", description = "챌린지 참여 성공")
    @ApiResponse(responseCode = "400", description = "이미 참여한 챌린지 또는 최대 인원 초과")
    @ApiResponse(responseCode = "404", description = "챌린지를 찾을 수 없음")
    @PostMapping("/challenges/{challengeId}/participants")
    @ResponseStatus(HttpStatus.CREATED)
    public ParticipantResponse joinChallenge(
            @PathVariable Long challengeId,
            @AuthenticationPrincipal MemberPrincipal principal) {
        Member member = memberService.findVerifiedMember(principal.id());
        var participation = participationService.joinChallenge(challengeId, member);
        var dto = challengePresentationMapper.toParticipantResult(participation);
        return challengePresentationMapper.toResponse(dto);
    }

    @Operation(summary = "챌린지 탈퇴/퇴장", description = "특정 챌린지에서 탈퇴하거나 다른 멤버를 퇴장시킵니다.")
    @ApiResponse(responseCode = "204", description = "챌린지 탈퇴/퇴장 성공")
    @ApiResponse(responseCode = "403", description = "권한 없음")
    @ApiResponse(responseCode = "404", description = "참여하지 않은 챌린지")
    @DeleteMapping("/challenges/{challengeId}/participants/{memberId}")
    @ResponseStatus(HttpStatus.NO_CONTENT)
    @PreAuthorize("#memberId == authentication.principal.id or @challengeService.isOwner(#challengeId, authentication.principal.id)")
    public void leaveChallenge(
            @PathVariable Long challengeId,
            @PathVariable UUID memberId) {
        Member member = memberService.findVerifiedMember(memberId);
        participationService.leaveChallenge(challengeId, member);
    }

    @Operation(summary = "초대 코드로 챌린지 참여", description = "초대 코드를 사용하여 챌린지에 참여합니다.")
    @ApiResponse(responseCode = "201", description = "챌린지 참여 성공")
    @ApiResponse(responseCode = "404", description = "유효하지 않은 초대 코드")
    @PostMapping("/challenges/join")
    @ResponseStatus(HttpStatus.CREATED)
    public ParticipantResponse joinByInviteCode(
            @Valid @RequestBody JoinByInviteRequest request,
            @AuthenticationPrincipal MemberPrincipal principal) {
        Member member = memberService.findVerifiedMember(principal.id());
        var participation = participationService.joinByInviteCode(request.inviteCode(), member);
        var dto = challengePresentationMapper.toParticipantResult(participation);
        return challengePresentationMapper.toResponse(dto);
    }

    @Operation(summary = "특정 멤버의 모든 참여 현황", description = "특정 멤버가 참여한 모든 챌린지 목록을 조회합니다.")
    @ApiResponse(responseCode = "200", description = "참여 현황 조회 성공")
    @GetMapping("/members/{memberId}/participations")
    @PreAuthorize("#memberId == authentication.principal.id or hasRole('ADMIN')")
    public Page<ParticipantResponse> getMemberParticipations(
            @PathVariable UUID memberId,
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size) {
        Pageable pageable = PageRequest.of(page, size);
        Page<ParticipantResult> pageDto = participationService.getMemberParticipations(memberId, pageable);
        return pageDto.map(challengePresentationMapper::toResponse);
    }
}