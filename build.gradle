plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.0'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.github.ben-manes.versions' version '0.52.0'
    id 'jacoco'
    id 'org.sonarqube' version '6.3.1.5724'
    id 'org.openrewrite.rewrite' version '6.27.0'
}

group = 'point'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'

    compileOnly 'org.projectlombok:lombok'

    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.8'

    implementation 'org.mapstruct:mapstruct:1.6.3'

    // Annotation processor 순서가 중요함 - Lombok이 먼저 처리되어야 함
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'

    implementation 'com.googlecode.owasp-java-html-sanitizer:owasp-java-html-sanitizer:20240325.1'

    runtimeOnly 'org.postgresql:postgresql'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
    developmentOnly 'org.springframework.boot:spring-boot-testcontainers'
    developmentOnly 'org.testcontainers:postgresql'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.testcontainers:testcontainers'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'org.testcontainers:junit-jupiter'

    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // OpenRewrite dependencies
    rewrite platform("org.openrewrite.recipe:rewrite-recipe-bom:2.22.0")
    rewrite("org.openrewrite.recipe:rewrite-spring")
    rewrite("org.openrewrite.recipe:rewrite-migrate-java")
}

tasks.named('test') {
    useJUnitPlatform()
    maxParallelForks = Runtime.runtime.availableProcessors()
    forkEvery = 20
    systemProperty 'junit.jupiter.execution.parallel.enabled', 'false'
}

// MapStruct가 Lombok의 fluent accessor를 인식하도록 설정
tasks.withType(JavaCompile) {
    options.compilerArgs += [
            '-Amapstruct.defaultComponentModel=spring',
            '-Amapstruct.unmappedTargetPolicy=WARN',
            '-Amapstruct.suppressGeneratorTimestamp=true',
            '-Amapstruct.suppressGeneratorVersionInfoComment=true',
            '-Amapstruct.verbose=true'
    ]
}

// Lombok과 MapStruct 통합 설정
compileJava {
    options.annotationProcessorPath = configurations.annotationProcessor

    // Lombok이 먼저 처리되도록 보장
    options.compilerArgs += ['-Xlint:unchecked', '-Xlint:deprecation']
}

// =======================================
// 품질 검사 도구 설정 (board-hole 스타일)
// =======================================

// Jacoco 설정 (테스트 커버리지)

jacoco {
    toolVersion = '0.8.12'
}

jacocoTestReport {
    dependsOn test

    reports {
        xml.required = true  // SonarQube 연동용
        html.required = true // 개발자 확인용
        csv.required = false
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/*Application*',     // Spring Boot main class
                    '**/*Config*',          // Configuration classes
                    '**/*Test*',            // Test classes
                    '**/*Exception*',       // Exception classes
                    '**/dto/**',            // DTO classes
                    '**/entity/**'          // Entity classes (optional)
            ])
        }))
    }
}

test {
    finalizedBy jacocoTestReport

    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat = "short"
    }
}

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport

    violationRules {
        rule {
            limit {
                minimum = 0.60  // 현재 수준 근처로 설정
            }
        }

        rule {
            element = 'CLASS'
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.40  // 점진적 개선용
            }
        }

        rule {
            element = 'METHOD'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.50  // 점진적 개선용
            }
        }
    }
}

// SonarQube 설정

sonarqube {
    properties {
        property "sonar.projectKey", "ttodo-api"
        property "sonar.projectName", "TTODO API"
        property "sonar.projectVersion", project.version

        // 소스 설정
        property "sonar.sources", "src/main/java"
        property "sonar.tests", "src/test/java"
        property "sonar.java.binaries", "build/classes/java/main"
        property "sonar.java.test.binaries", "build/classes/java/test"

        // Lombok 지원
        property "sonar.java.lombok.addLombokGeneratedAnnotation", "true"

        // 커버리지
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.junit.reportPaths", "build/test-results/test"

        // 제외 패턴
        property "sonar.exclusions", '''
            **/test/**,
            **/*Test.java,
            **/*Tests.java,
            **/*Config.java,
            **/*Configuration.java,
            **/package-info.java,
            **/*Application.java,
            **/dto/**,
            **/result/**
        '''

        // 중복 코드 제외
        property "sonar.cpd.exclusions", '''
            **/*Test.java,
            **/*Entity.java,
            **/*DTO.java
        '''
    }
}

// JSpecify Null Safety 자동화 (board-hole 스타일)
task ensureNullMarked {
    group = 'build setup'
    description = 'Ensure all packages have @NullMarked package-info.java files'

    doLast {
        def srcDir = file('src/main/java')
        def packages = [:]

        // 모든 .java 파일이 있는 패키지 수집
        fileTree(srcDir) {
            include '**/*.java'
            exclude '**/package-info.java'
        }.each { javaFile ->
            def packageDir = javaFile.parentFile
            def packageName = packageDir.path
                    .replace(srcDir.path + File.separator, '')
                    .replace(File.separator, '.')
            packages[packageDir] = packageName
        }

        // package-info.java가 없는 패키지에 자동 생성
        packages.each { packageDir, packageName ->
            def packageInfoFile = new File(packageDir, 'package-info.java')
            if (!packageInfoFile.exists()) {
                packageInfoFile.text = """/**
 * ${packageName} package
 */
@NullMarked
package ${packageName};

import org.jspecify.annotations.NullMarked;
"""
                println "✅ Generated package-info.java for: ${packageName}"
            }
        }
    }
}

// 컴파일 전에 자동으로 package-info.java 생성
compileJava.dependsOn ensureNullMarked

// build 태스크가 테스트 커버리지를 포함하도록 설정
build {
    dependsOn jacocoTestCoverageVerification
}

// OpenRewrite 설정
rewrite {
    activeRecipe("point.ttodoApi.BoardHoleStructureAlignment")
    configFile = file("rewrite.yml")
}

// Apply quality gates configuration
apply from: 'gradle/quality-gates.gradle'

// Apply refactoring configuration
apply from: 'gradle/refactoring.gradle'