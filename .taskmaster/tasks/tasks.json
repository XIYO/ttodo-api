{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "이메일 알림 서비스 구현",
        "description": "만료일 알림, 챌린지 초대, 업적 달성 등을 위한 이메일 알림 시스템 구축",
        "details": "Spring Boot Mail Starter를 사용하여 이메일 서비스 구현. 구현 내용: 1) EmailService 인터페이스 정의 (sendDueDateReminder, sendChallengeInvitation, sendAchievementUnlock), 2) JavaMailSender를 사용한 EmailServiceImpl 구현, 3) 이메일 템플릿 엔진(Thymeleaf) 통합, 4) 비동기 처리를 위한 @Async 설정, 5) 이메일 발송 이력 저장을 위한 EmailLog 엔티티 생성",
        "testStrategy": "1) 단위 테스트: MockMailSender를 사용하여 이메일 발송 로직 검증, 2) 통합 테스트: TestContainers로 실제 SMTP 서버 시뮬레이션, 3) 템플릿 렌더링 테스트, 4) 비동기 처리 검증, 5) 이메일 발송 실패 시 재시도 로직 테스트",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "이메일 서비스 인터페이스 설계",
            "description": "EmailService 인터페이스 정의 및 메일 발송을 위한 기본 구조 설계",
            "dependencies": [],
            "details": "EmailService 인터페이스 생성하고 sendDueDateReminder, sendChallengeInvitation, sendAchievementUnlock 메소드 정의. 이메일 발송을 위한 DTO 클래스(EmailRequest, EmailTemplate) 생성 및 메일 타입별 enum 정의",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Spring Boot Mail 기반 EmailService 구현체 개발",
            "description": "JavaMailSender를 활용한 EmailServiceImpl 구현 및 SMTP 설정",
            "dependencies": [
              1
            ],
            "details": "EmailServiceImpl 클래스 구현하여 JavaMailSender 의존성 주입. MimeMessage 생성 및 발송 로직 구현. application.yml에 SMTP 서버 설정 추가 (Gmail, AWS SES 등). 첨부파일 지원 기능 포함",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Thymeleaf 이메일 템플릿 엔진 통합",
            "description": "HTML 이메일 템플릿 작성 및 Thymeleaf 렌더링 시스템 구현",
            "dependencies": [
              2
            ],
            "details": "resources/templates/email/ 디렉토리에 HTML 템플릿 파일 생성 (due-date-reminder.html, challenge-invitation.html, achievement-unlock.html). ThymeleafTemplateEngine 설정 및 템플릿 렌더링 서비스 구현. 동적 데이터 바인딩 및 다국어 지원",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "비동기 이메일 처리 시스템 구현",
            "description": "@Async 어노테이션을 활용한 비동기 메일 발송 및 스레드풀 설정",
            "dependencies": [
              3
            ],
            "details": "@EnableAsync 설정 및 TaskExecutor 빈 구성. 이메일 발송 메소드에 @Async 적용하여 non-blocking 처리. 발송 실패 시 재시도 로직(@Retryable) 구현. 비동기 처리 상태 추적을 위한 CompletableFuture 활용",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "이메일 발송 이력 관리 시스템 구현",
            "description": "EmailLog 엔티티 및 발송 이력 저장/조회 기능 구현",
            "dependencies": [
              4
            ],
            "details": "EmailLog 엔티티 생성 (recipient, subject, status, sentAt, errorMessage). EmailLogRepository 인터페이스 정의 및 발송 성공/실패 이력 저장 로직 구현. 이메일 발송 통계 조회 API 엔드포인트 추가. 개인정보 보호를 위한 로그 보존 정책 설정",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "이메일 서비스 테스트 코드 작성",
            "description": "MockMailSender를 활용한 단위 테스트 및 통합 테스트 구현",
            "dependencies": [
              5
            ],
            "details": "MockMailSender를 사용한 EmailServiceImpl 단위 테스트 작성. TestContainers로 실제 SMTP 서버 시뮬레이션 통합 테스트 구현. 템플릿 렌더링 정확성 검증 테스트. 비동기 처리 및 재시도 로직 테스트. 이메일 발송 실패 시나리오별 테스트 케이스 작성",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 2,
        "title": "데이터 검증 및 비즈니스 규칙 강화",
        "description": "도메인 모델의 비즈니스 규칙 검증 로직 추가 및 에러 메시지 다국어화",
        "details": "1) Bean Validation 어노테이션 확장 (@ValidRepeatEndDate, @ValidExperiencePoint 등 커스텀 검증), 2) 도메인 서비스에 비즈니스 규칙 검증 메소드 추가 (예: 반복 종료일은 시작일 이후, 챌린지 참여자 수 제한 등), 3) GlobalExceptionHandler 개선으로 일관된 에러 응답, 4) MessageSource를 활용한 다국어 에러 메시지 (한국어/영어), 5) 검증 실패 시 상세한 필드별 에러 정보 제공",
        "testStrategy": "1) 각 커스텀 검증 어노테이션에 대한 단위 테스트, 2) 비즈니스 규칙 위반 시나리오별 테스트 케이스, 3) 다국어 메시지 출력 검증, 4) API 엔드포인트별 잘못된 입력값 처리 테스트, 5) 에러 응답 형식 일관성 검증",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "커스텀 Bean Validation 어노테이션 개발",
            "description": "@ValidRepeatEndDate, @ValidExperiencePoint 등 프로젝트 특화 검증 어노테이션을 생성하고 Validator 구현체를 개발합니다.",
            "dependencies": [],
            "details": "1) @ValidRepeatEndDate 어노테이션 및 RepeatEndDateValidator 구현 (반복 종료일이 시작일 이후인지 검증), 2) @ValidExperiencePoint 어노테이션 및 ExperiencePointValidator 구현 (경험치 범위 검증), 3) @ValidChallengeParticipants 어노테이션 및 ChallengeParticipantsValidator 구현 (참여자 수 제한 검증), 4) 각 어노테이션에 대한 메시지 키 정의 및 기본 메시지 설정",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "비즈니스 규칙 검증 서비스 구현",
            "description": "도메인 서비스 계층에 비즈니스 로직 검증 메소드를 추가하여 복잡한 비즈니스 규칙을 처리합니다.",
            "dependencies": [
              1
            ],
            "details": "1) TodoValidationService 생성 (할일 관련 비즈니스 규칙 검증), 2) ChallengeValidationService 생성 (챌린지 참여 조건, 종료일 검증 등), 3) MemberValidationService 생성 (회원 권한, 레벨 제한 등), 4) 각 서비스에 validateXXX 메소드 구현, 5) 검증 실패 시 적절한 비즈니스 예외 발생",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "GlobalExceptionHandler 개선 및 통합",
            "description": "일관된 에러 응답 형식을 제공하고 Bean Validation 및 비즈니스 예외를 통합 처리합니다.",
            "dependencies": [
              2
            ],
            "details": "1) ErrorResponse DTO 표준화 (code, message, field-specific errors), 2) @ExceptionHandler에서 MethodArgumentNotValidException 처리 개선, 3) 커스텀 비즈니스 예외 처리 추가, 4) 필드별 에러 정보 상세 제공, 5) HTTP 상태 코드 매핑 정책 수립",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "다국어 메시지 설정 및 구성",
            "description": "MessageSource를 활용하여 한국어/영어 에러 메시지 및 검증 메시지를 다국어화합니다.",
            "dependencies": [
              3
            ],
            "details": "1) messages_ko.properties, messages_en.properties 파일 생성, 2) Bean Validation 메시지 키 정의 및 번역, 3) 비즈니스 예외 메시지 키 정의 및 번역, 4) LocaleResolver 설정 (Accept-Language 헤더 기반), 5) MessageSource Bean 설정 및 GlobalExceptionHandler에서 활용",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "API 통합 테스트 및 검증 시나리오 구현",
            "description": "모든 검증 로직이 통합된 API 엔드포인트에 대한 포괄적인 테스트를 구현합니다.",
            "dependencies": [
              4
            ],
            "details": "1) @WebMvcTest를 활용한 컨트롤러 계층 테스트, 2) 각 커스텀 어노테이션별 위반 시나리오 테스트, 3) 비즈니스 규칙 위반 API 테스트, 4) 다국어 메시지 출력 검증 테스트, 5) 에러 응답 형식 일관성 검증, 6) 성공/실패 케이스별 통합 테스트 시나리오 작성",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 3,
        "title": "친구 시스템 도메인 모델 및 API 구현",
        "description": "친구 요청, 수락/거절, 친구 목록 관리를 위한 도메인 모델과 REST API 구축",
        "details": "1) Friendship 엔티티 생성 (requesterId, receiverId, status, createdAt), 2) FriendshipStatus enum (PENDING, ACCEPTED, REJECTED, BLOCKED), 3) FriendshipService 구현 (sendRequest, acceptRequest, rejectRequest, getFriends), 4) REST 엔드포인트: POST /friends/request, PUT /friends/requests/{id}/accept, GET /friends, DELETE /friends/{id}, 5) 양방향 친구 관계 처리 로직, 6) 친구 요청 알림 연동",
        "testStrategy": "1) 친구 요청 중복 방지 테스트, 2) 친구 관계 상태 전이 검증, 3) 양방향 관계 일관성 테스트, 4) 권한 검증 (본인만 수락/거절 가능), 5) 친구 목록 페이징 및 정렬 테스트",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "친구 시스템 도메인 모델 설계",
            "description": "Friendship 엔티티와 FriendshipStatus enum을 설계하여 친구 관계의 핵심 데이터 구조를 정의합니다",
            "dependencies": [],
            "details": "1) Friendship 엔티티 생성 (requesterId, receiverId, status, createdAt, updatedAt 필드 포함), 2) FriendshipStatus enum 정의 (PENDING, ACCEPTED, REJECTED, BLOCKED), 3) Member 엔티티와의 관계 매핑 설정, 4) 양방향 관계를 위한 복합 인덱스 설계, 5) 엔티티 제약조건 및 유효성 검증 어노테이션 추가",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "친구 시스템 리포지토리 구현",
            "description": "Friendship 엔티티를 위한 JPA 리포지토리와 커스텀 쿼리 메소드를 구현합니다",
            "dependencies": [
              1
            ],
            "details": "1) FriendshipRepository 인터페이스 생성, 2) 친구 관계 조회를 위한 커스텀 쿼리 메소드 구현, 3) 양방향 친구 관계 조회 쿼리 최적화, 4) 친구 요청 중복 검사 쿼리, 5) 페이징 및 정렬을 지원하는 친구 목록 조회 메소드, 6) 성능 최적화를 위한 인덱스 힌트 활용",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "친구 시스템 서비스 로직 개발",
            "description": "친구 요청, 수락/거절, 차단 등의 핵심 비즈니스 로직을 구현합니다",
            "dependencies": [
              2
            ],
            "details": "1) FriendshipService 클래스 생성, 2) sendFriendRequest 메소드 (중복 요청 방지 로직 포함), 3) acceptFriendRequest/rejectFriendRequest 메소드, 4) blockUser/unblockUser 메소드, 5) getFriends 메소드 (페이징 지원), 6) 양방향 관계 처리 로직, 7) 권한 검증 로직 (본인만 수락/거절 가능), 8) 트랜잭션 처리 및 예외 핸들링",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "친구 시스템 REST 컨트롤러 구현",
            "description": "친구 시스템의 모든 기능을 제공하는 REST API 엔드포인트를 구현합니다",
            "dependencies": [
              3
            ],
            "details": "1) FriendController 클래스 생성, 2) POST /friends/request (친구 요청), 3) PUT /friends/requests/{id}/accept (요청 수락), 4) PUT /friends/requests/{id}/reject (요청 거절), 5) GET /friends (친구 목록 조회), 6) DELETE /friends/{id} (친구 삭제), 7) POST /friends/{id}/block (사용자 차단), 8) 요청/응답 DTO 클래스 정의, 9) API 문서화 어노테이션 추가",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "양방향 친구 관계 처리 로직 구현",
            "description": "친구 관계의 양방향성을 보장하고 데이터 일관성을 유지하는 로직을 구현합니다",
            "dependencies": [
              4
            ],
            "details": "1) 친구 수락 시 양방향 관계 생성 로직, 2) 친구 삭제 시 양방향 관계 제거 로직, 3) 차단 시 기존 친구 관계 처리, 4) 데이터 일관성 검증 메소드, 5) 동시성 제어를 위한 락 메커니즘, 6) 관계 상태 전이 규칙 구현, 7) 고아 데이터 정리 배치 작업",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "친구 요청 알림 시스템 연동",
            "description": "친구 요청 및 수락 시 실시간 알림을 발송하는 시스템과 연동합니다",
            "dependencies": [
              5
            ],
            "details": "1) ApplicationEventPublisher를 활용한 이벤트 발행, 2) FriendRequestEvent 및 FriendAcceptedEvent 클래스 정의, 3) 알림 서비스와의 연동 로직, 4) 실시간 알림을 위한 WebSocket 메시지 발송, 5) 푸시 알림 템플릿 정의, 6) 알림 발송 실패 시 재시도 메커니즘, 7) 사용자별 알림 설정 존중",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "친구 시스템 통합 테스트 구현",
            "description": "친구 시스템의 모든 기능에 대한 포괄적인 통합 테스트를 작성합니다",
            "dependencies": [
              6
            ],
            "details": "1) 친구 요청 중복 방지 테스트, 2) 친구 관계 상태 전이 검증 테스트, 3) 양방향 관계 일관성 테스트, 4) 권한 검증 테스트 (본인만 수락/거절 가능), 5) 친구 목록 페이징 및 정렬 테스트, 6) 동시성 테스트 (여러 사용자가 동시에 요청), 7) 차단 기능 테스트, 8) 알림 발송 검증 테스트, 9) 성능 테스트 (대량 친구 관계 처리)",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 4,
        "title": "공유 할일 기능 구현",
        "description": "여러 사용자가 함께 수행하는 할일 생성 및 관리 기능 개발",
        "details": "1) SharedTodo 엔티티 생성 (TodoOriginal 확장, assignees 관계), 2) TodoAssignment 연결 테이블 (todoId, memberId, completedAt, completedBy), 3) 공유 할일 생성 시 친구만 추가 가능 검증, 4) 완료 합의 방식 설정 (ALL_REQUIRED, ANY_ONE, MAJORITY), 5) SharedTodoService 구현, 6) 공유 할일 전용 엔드포인트 추가, 7) 할일 업데이트 시 모든 참여자에게 알림",
        "testStrategy": "1) 친구가 아닌 사용자 추가 시 에러 검증, 2) 다양한 완료 합의 방식별 시나리오 테스트, 3) 동시 완료 처리 시 동시성 문제 검증, 4) 참여자별 진행 상황 추적 테스트, 5) 알림 발송 검증",
        "priority": "medium",
        "dependencies": [
          3
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "공유 할일 도메인 모델 설계",
            "description": "SharedTodo 엔티티와 관련 도메인 모델 구조 설계 및 생성",
            "dependencies": [],
            "details": "1) SharedTodo 엔티티 생성 (TodoOriginal 확장), 2) 완료 합의 방식 enum (CompletionConsensusType: ALL_REQUIRED, ANY_ONE, MAJORITY), 3) 공유 할일 상태 관리를 위한 필드 추가, 4) JPA 관계 매핑 설정",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "TodoAssignment 연결 테이블 구현",
            "description": "할일-참여자 간의 다대다 관계를 관리하는 연결 테이블 구현",
            "dependencies": [
              1
            ],
            "details": "1) TodoAssignment 엔티티 생성 (todoId, memberId, completedAt, completedBy), 2) 복합키 설정, 3) SharedTodo와 Member 엔티티 간 양방향 매핑, 4) JPA Repository 구현",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "친구 관계 검증 로직 구현",
            "description": "공유 할일 생성 시 친구만 추가 가능하도록 하는 권한 검증 로직 구현",
            "dependencies": [
              2
            ],
            "details": "1) FriendshipService에서 친구 관계 검증 메소드 추가, 2) 공유 할일 생성 시 참여자 권한 검증, 3) 비친구 추가 시 예외 처리, 4) 권한 검증 실패 시 적절한 에러 메시지 반환",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "완료 합의 메커니즘 구현",
            "description": "다양한 완료 합의 방식에 따른 할일 완료 처리 로직 구현",
            "dependencies": [
              3
            ],
            "details": "1) 합의 방식별 완료 조건 검증 로직, 2) 부분 완료 상태 관리, 3) 완료 진행률 계산, 4) 전체 완료 시 상태 업데이트, 5) 완료 취소 처리 로직",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "SharedTodoService 레이어 구현",
            "description": "공유 할일의 비즈니스 로직을 처리하는 서비스 레이어 구현",
            "dependencies": [
              4
            ],
            "details": "1) 공유 할일 생성/수정/삭제 메소드, 2) 참여자 추가/제거 로직, 3) 개별 완료 처리 메소드, 4) 전체 진행 상황 조회, 5) 트랜잭션 관리 및 동시성 처리",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "공유 할일 API 엔드포인트 개발",
            "description": "공유 할일 관리를 위한 REST API 엔드포인트 구현",
            "dependencies": [
              5
            ],
            "details": "1) POST /shared-todos (생성), 2) GET /shared-todos (목록 조회), 3) PUT /shared-todos/{id} (수정), 4) DELETE /shared-todos/{id} (삭제), 5) POST /shared-todos/{id}/complete (완료 처리), 6) 요청/응답 DTO 정의",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "알림 시스템 연동",
            "description": "공유 할일 업데이트 시 참여자들에게 알림을 발송하는 시스템 연동",
            "dependencies": [
              6
            ],
            "details": "1) 할일 생성/수정 시 참여자 알림, 2) 완료 처리 시 다른 참여자 알림, 3) 전체 완료 시 모든 참여자 알림, 4) 이메일 알림 템플릿 추가, 5) 비동기 알림 발송 처리",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 8,
            "title": "동시성 처리 및 통합 테스트",
            "description": "동시 완료 처리 시 발생할 수 있는 동시성 문제 해결 및 전체 기능 테스트",
            "dependencies": [
              7
            ],
            "details": "1) 동시 완료 처리 시 낙관적 락 적용, 2) 완료 상태 불일치 방지 로직, 3) 통합 테스트 시나리오 작성, 4) 다양한 완료 합의 방식별 테스트, 5) 성능 테스트 및 부하 테스트",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 5,
        "title": "활동 피드 시스템 구현",
        "description": "친구들의 할일 완료, 레벨업, 챌린지 참여 등의 활동을 보여주는 피드 구현",
        "details": "1) ActivityEvent 엔티티 (type, actorId, targetId, metadata, createdAt), 2) EventType enum (TODO_COMPLETED, LEVEL_UP, CHALLENGE_JOINED, ACHIEVEMENT_UNLOCKED), 3) 이벤트 발행을 위한 ApplicationEventPublisher 활용, 4) ActivityFeedService로 친구 활동만 필터링, 5) GET /activity-feed 엔드포인트 (페이징, 시간순 정렬), 6) 활동별 렌더링 템플릿, 7) 읽음/안읽음 상태 관리",
        "testStrategy": "1) 이벤트 발행 및 저장 검증, 2) 친구 활동만 표시되는지 확인, 3) 페이징 및 정렬 기능 테스트, 4) 대량 이벤트 처리 성능 테스트, 5) 읽음 상태 업데이트 동시성 테스트",
        "priority": "medium",
        "dependencies": [
          3
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "이벤트 모델 및 엔티티 설계",
            "description": "ActivityEvent 엔티티와 EventType enum을 설계하고 구현",
            "dependencies": [],
            "details": "ActivityEvent 엔티티 (id, type, actorId, targetId, metadata, createdAt, isRead) 및 EventType enum (TODO_COMPLETED, LEVEL_UP, CHALLENGE_JOINED, ACHIEVEMENT_UNLOCKED) 정의. JPA 어노테이션과 JSON 직렬화 설정 포함.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "이벤트 발행 시스템 구축",
            "description": "Spring Event를 활용한 이벤트 발행 메커니즘 구현",
            "dependencies": [
              1
            ],
            "details": "ApplicationEventPublisher를 주입받아 도메인 이벤트 발행. EventListener를 통한 ActivityEvent 생성 및 저장. 비동기 처리를 위한 @Async 설정 적용.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "활동 피드 서비스 구현",
            "description": "친구 관계를 고려한 ActivityFeedService 구현",
            "dependencies": [
              1,
              2
            ],
            "details": "친구 활동만 필터링하는 로직, 페이징 처리, 시간순 정렬 기능. Repository에서 Friend 테이블과 조인하여 효율적인 쿼리 작성. 읽음 상태 업데이트 메소드 포함.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "피드 API 엔드포인트 개발",
            "description": "활동 피드 조회 및 관리를 위한 REST API 구현",
            "dependencies": [
              3
            ],
            "details": "GET /activity-feed (페이징, 필터링 파라미터), PUT /activity-feed/{id}/read (읽음 처리), GET /activity-feed/unread-count 엔드포인트. Swagger 문서화 및 응답 DTO 정의.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "읽음 상태 관리 시스템",
            "description": "활동 피드의 읽음/안읽음 상태 관리 기능 구현",
            "dependencies": [
              3,
              4
            ],
            "details": "개별 읽음 처리, 일괄 읽음 처리, 안읽은 개수 조회 기능. 동시성 제어를 위한 낙관적 락 적용. 읽음 상태 변경 시 실시간 알림 연동.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "성능 최적화 및 테스트",
            "description": "활동 피드 시스템의 성능 최적화 및 종합 테스트 수행",
            "dependencies": [
              4,
              5
            ],
            "details": "데이터베이스 인덱스 최적화, 쿼리 성능 튜닝, 대량 이벤트 처리 성능 테스트. 단위 테스트, 통합 테스트, 부하 테스트 작성. 읽음 상태 동시성 테스트 포함.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 6,
        "title": "챌린지 시스템 개선 및 리더보드 구현",
        "description": "친구 그룹 전용 챌린지, 진행 마일스톤, 실시간 리더보드 기능 추가",
        "details": "1) Challenge 엔티티에 visibility (PUBLIC, FRIENDS_ONLY, PRIVATE) 추가, 2) ChallengeMilestone 엔티티 (challengeId, requiredProgress, bonusXP), 3) 실시간 리더보드를 위한 Redis Sorted Set 활용, 4) ChallengeLeaderboardService 구현, 5) WebSocket을 통한 실시간 순위 업데이트, 6) 챌린지 완료 인증서 생성 (PDF), 7) 주간/월간 리더보드 리셋 스케줄러",
        "testStrategy": "1) 가시성별 챌린지 접근 권한 테스트, 2) 마일스톤 달성 시 보너스 XP 지급 검증, 3) Redis 리더보드 정확성 테스트, 4) WebSocket 연결 및 실시간 업데이트 테스트, 5) 동시 점수 업데이트 시 일관성 검증",
        "priority": "medium",
        "dependencies": [
          3
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "챌린지 모델 확장 및 기본 구조 설정",
            "description": "Challenge 엔티티에 visibility(공개/친구/비공개) 필드 추가하고 ChallengeMilestone 엔티티 구현",
            "dependencies": [],
            "details": "1) Challenge 엔티티에 visibility enum 추가 (PUBLIC, FRIENDS_ONLY, PRIVATE), 2) ChallengeMilestone 엔티티 생성 (challengeId, requiredProgress, bonusXP, description), 3) 연관관계 매핑 설정, 4) 마이그레이션 스크립트 작성",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "마일스톤 시스템 비즈니스 로직 구현",
            "description": "마일스톤 달성 검증 및 보너스 XP 지급 로직 구현",
            "dependencies": [
              1
            ],
            "details": "1) MilestoneService 생성하여 마일스톤 달성 체크 로직, 2) 진행률 계산 및 달성 검증 메소드, 3) 보너스 XP 지급 처리, 4) 마일스톤 달성 이벤트 발행, 5) 중복 보상 방지 로직",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Redis 리더보드 구현",
            "description": "Redis Sorted Set을 활용한 실시간 리더보드 시스템 구축",
            "dependencies": [
              1
            ],
            "details": "1) Redis 설정 및 연결 구성, 2) ChallengeLeaderboardService 구현, 3) Sorted Set으로 실시간 순위 관리, 4) 순위 조회/업데이트 메소드, 5) TTL 설정으로 자동 정리, 6) 배치 업데이트 최적화",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "WebSocket 실시간 업데이트 시스템",
            "description": "WebSocket을 통한 리더보드 실시간 순위 업데이트 구현",
            "dependencies": [
              3
            ],
            "details": "1) WebSocket 설정 및 핸들러 구현, 2) 리더보드 변경 이벤트 리스너, 3) 클라이언트별 구독 관리, 4) 순위 변동 시 실시간 알림 전송, 5) 연결 상태 관리 및 재연결 처리",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "챌린지 완료 인증서 생성 기능",
            "description": "PDF 라이브러리를 활용한 챌린지 완료 인증서 생성 시스템",
            "dependencies": [
              2
            ],
            "details": "1) iText PDF 라이브러리 설정, 2) CertificateService 구현, 3) 인증서 템플릿 디자인 및 구현, 4) 개인화된 정보 삽입 (이름, 챌린지명, 완료일), 5) PDF 파일 저장 및 다운로드 엔드포인트",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "리더보드 리셋 스케줄러 구현",
            "description": "주간/월간 리더보드 자동 리셋 및 아카이브 시스템",
            "dependencies": [
              3
            ],
            "details": "1) Spring Scheduler 설정, 2) 주간/월간 리셋 스케줄 작업, 3) 이전 기록 아카이브 처리, 4) 시즌별 챔피언 기록 보관, 5) 스케줄러 실행 로그 및 모니터링",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "성능 최적화 및 동시성 처리",
            "description": "대용량 동시 업데이트 처리 및 데이터 일관성 보장",
            "dependencies": [
              4
            ],
            "details": "1) Redis 파이프라인 처리로 배치 업데이트, 2) 낙관적 락을 통한 동시성 제어, 3) 리더보드 캐시 전략 구현, 4) 부하 분산을 위한 샤딩 고려, 5) 성능 메트릭 수집 및 모니터링",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 8,
            "title": "통합 테스트 및 API 엔드포인트 구현",
            "description": "전체 챌린지 시스템 통합 테스트 및 REST API 완성",
            "dependencies": [
              5,
              6,
              7
            ],
            "details": "1) 챌린지 리더보드 조회 API 구현, 2) 실시간 순위 변동 테스트, 3) 대용량 동시 접속 시뮬레이션, 4) WebSocket 연결 안정성 테스트, 5) 전체 시스템 통합 검증 및 문서화",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 7,
        "title": "업적 시스템 구현",
        "description": "자동 추적되는 업적 시스템으로 장기적인 목표 달성 동기 부여",
        "details": "1) Achievement 엔티티 (name, description, criteria, iconUrl, xpReward), 2) AchievementProgress 엔티티 (memberId, achievementId, progress, unlockedAt), 3) AchievementCriteria 인터페이스와 구현체들 (TodoCountCriteria, StreakCriteria, LevelCriteria), 4) 이벤트 리스너로 자동 진행도 업데이트, 5) 업적 달성 시 알림 및 XP 지급, 6) GET /achievements, GET /members/{id}/achievements 엔드포인트",
        "testStrategy": "1) 다양한 업적 조건 충족 시나리오 테스트, 2) 진행도 자동 업데이트 검증, 3) 업적 달성 시 보상 지급 테스트, 4) 중복 달성 방지 테스트, 5) 업적 목록 필터링 및 정렬 테스트",
        "priority": "low",
        "dependencies": [
          5
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "업적 도메인 모델 및 엔티티 설계",
            "description": "Achievement, AchievementProgress 엔티티와 기본 도메인 모델을 설계하고 구현합니다.",
            "dependencies": [],
            "details": "Achievement 엔티티 (id, name, description, criteria, iconUrl, xpReward, isActive, createdAt), AchievementProgress 엔티티 (id, memberId, achievementId, progress, maxProgress, unlockedAt, createdAt), JPA 매핑 관계 설정, 기본 Repository 인터페이스 생성",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "업적 조건 인터페이스 및 구현체 개발",
            "description": "확장 가능한 AchievementCriteria 인터페이스와 다양한 조건 구현체들을 개발합니다.",
            "dependencies": [
              1
            ],
            "details": "AchievementCriteria 인터페이스 (checkProgress, isCompleted 메소드), TodoCountCriteria (총 할일 완료 수), StreakCriteria (연속 완료 일수), LevelCriteria (레벨 달성), CategoryCompletionCriteria (카테고리별 완료), 팩토리 패턴으로 조건 객체 생성",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "업적 진행도 추적 서비스 구현",
            "description": "업적 진행도를 자동으로 추적하고 업데이트하는 핵심 서비스 로직을 구현합니다.",
            "dependencies": [
              2
            ],
            "details": "AchievementService 구현 (updateProgress, checkAchievementCompletion, getAchievements), 사용자별 업적 진행도 계산 로직, 업적 달성 조건 확인 및 완료 처리, 중복 달성 방지 로직, 업적 진행도 배치 업데이트 최적화",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "이벤트 기반 업적 추적 리스너 구현",
            "description": "할일 완료, 레벨업 등의 이벤트를 감지하여 자동으로 업적 진행도를 업데이트하는 이벤트 리스너를 구현합니다.",
            "dependencies": [
              3
            ],
            "details": "@EventListener 어노테이션 활용, TodoCompletedEvent, LevelUpEvent, StreakUpdatedEvent 처리, 비동기 이벤트 처리 (@Async), 이벤트 발행 실패 시 재처리 메커니즘, 트랜잭션 커밋 후 이벤트 처리 보장",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "업적 달성 보상 시스템 연동",
            "description": "업적 달성 시 XP 지급과 알림 발송 등의 보상 시스템을 구현합니다.",
            "dependencies": [
              4
            ],
            "details": "업적 달성 시 XP 자동 지급 로직, 이메일 알림 서비스 연동 (sendAchievementUnlock), 업적 달성 알림 템플릿 작성, 보상 지급 이력 로깅, 업적 달성 축하 메시지 생성, 트랜잭션 안전성 보장",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "업적 관련 REST API 엔드포인트 개발",
            "description": "업적 목록 조회와 사용자별 업적 진행도 조회를 위한 API를 개발합니다.",
            "dependencies": [
              5
            ],
            "details": "AchievementController 구현, GET /achievements (전체 업적 목록), GET /members/{id}/achievements (사용자별 업적 진행도), 업적 필터링 (달성/미달성, 카테고리별), 페이징 및 정렬 지원, OpenAPI 문서화, 응답 DTO 설계",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "업적 시스템 통합 테스트 및 자동화",
            "description": "업적 시스템의 전체 플로우를 검증하는 포괄적인 테스트 스위트를 구현합니다.",
            "dependencies": [
              6
            ],
            "details": "다양한 업적 조건 충족 시나리오 테스트, 이벤트 리스너 작동 검증, 업적 달성 시 보상 지급 테스트, 중복 달성 방지 로직 테스트, API 엔드포인트 통합 테스트, 성능 테스트 (대량 사용자 시뮬레이션), TestContainers 활용한 실제 데이터베이스 테스트",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 8,
        "title": "연속 기록(Streak) 추적 시스템",
        "description": "일일 완료 연속 기록 추적 및 카테고리별 연속 기록 관리",
        "details": "1) Streak 엔티티 (memberId, type, currentCount, longestCount, lastCompletedDate), 2) StreakType enum (DAILY, CATEGORY_SPECIFIC), 3) StreakService에서 할일 완료 시 연속 기록 업데이트, 4) 연속 기록 복구 메커니즘 (1일 유예), 5) 연속 기록별 보너스 XP 계산, 6) GET /members/{id}/streaks 엔드포인트, 7) 연속 기록 위젯용 데이터 제공",
        "testStrategy": "1) 연속 기록 증가/중단 시나리오 테스트, 2) 시간대 고려한 일일 연속 기록 검증, 3) 복구 메커니즘 작동 테스트, 4) 보너스 XP 계산 정확성 검증, 5) 동시 완료 시 연속 기록 일관성 테스트",
        "priority": "low",
        "dependencies": [],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Streak 도메인 모델 설계 및 구현",
            "description": "Streak 엔티티와 StreakType enum을 설계하고 구현합니다. memberId, type, currentCount, longestCount, lastCompletedDate 필드를 포함하는 엔티티를 생성하고, DAILY와 CATEGORY_SPECIFIC을 포함하는 StreakType enum을 정의합니다.",
            "dependencies": [],
            "details": "1) Streak 엔티티 클래스 생성 (JPA 어노테이션 포함), 2) StreakType enum 정의, 3) 연관관계 매핑 (Member와의 관계), 4) 기본 Repository 인터페이스 생성, 5) 데이터베이스 스키마 마이그레이션 스크립트 작성",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "연속 기록 업데이트 로직 구현",
            "description": "할일 완료 시 연속 기록을 업데이트하는 핵심 로직을 StreakService에 구현합니다. 일일 연속 기록과 카테고리별 연속 기록을 각각 처리하는 메소드를 만듭니다.",
            "dependencies": [
              1
            ],
            "details": "1) StreakService 클래스 생성, 2) 할일 완료 이벤트 리스너 구현, 3) 연속 기록 증가 로직 (updateDailyStreak), 4) 카테고리별 연속 기록 처리 (updateCategoryStreak), 5) 시간대 고려한 일자 계산 로직, 6) 연속 기록 중단 판단 로직",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "연속 기록 복구 메커니즘 구현",
            "description": "1일 유예 기간을 포함한 연속 기록 복구 시스템을 구현합니다. 사용자가 하루 놓쳤을 때 다음날 완료하면 연속 기록을 유지할 수 있는 기능을 만듭니다.",
            "dependencies": [
              2
            ],
            "details": "1) 복구 가능 여부 판단 로직 (canRecoverStreak), 2) 연속 기록 복구 처리 메소드 (recoverStreak), 3) 복구 이력 추적을 위한 StreakRecovery 엔티티, 4) 복구 가능 상태 표시 로직, 5) 복구 제한 규칙 (최대 복구 횟수 등)",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "연속 기록 보너스 계산 시스템 구현",
            "description": "연속 기록 달성에 따른 보너스 XP 계산 로직을 구현합니다. 연속일수에 따라 차등 지급되는 보너스 시스템을 만듭니다.",
            "dependencies": [
              2
            ],
            "details": "1) 보너스 XP 계산 공식 정의 (calculateStreakBonus), 2) 연속일수별 보너스 테이블 구성, 3) XP 서비스와의 연동, 4) 보너스 지급 이력 저장, 5) 특별 마일스톤 보너스 (7일, 30일, 100일 등)",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "연속 기록 API 및 위젯 데이터 제공",
            "description": "연속 기록 조회를 위한 REST API 엔드포인트와 위젯용 데이터를 제공하는 기능을 구현합니다. 사용자의 현재 연속 기록 상태와 통계를 조회할 수 있는 API를 만듭니다.",
            "dependencies": [
              1,
              3,
              4
            ],
            "details": "1) StreakController 클래스 생성, 2) GET /members/{id}/streaks 엔드포인트 구현, 3) 연속 기록 DTO 클래스 정의, 4) 위젯용 요약 데이터 제공 (getCurrentStreakSummary), 5) 연속 기록 히스토리 조회 기능, 6) OpenAPI 문서화",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 9,
        "title": "고급 통계 및 분석 기능",
        "description": "생산성 인사이트, 완료 트렌드, 카테고리별 분석 제공",
        "details": "1) StatisticsService 확장으로 고급 분석 메소드 추가, 2) 시간대별 완료 패턴 분석 (productivityByHour), 3) 카테고리별 완료율 및 평균 소요 시간, 4) 주간/월간 트렌드 차트 데이터, 5) PostgreSQL 윈도우 함수 활용한 효율적 집계, 6) GET /members/{id}/analytics 엔드포인트, 7) 분석 결과 캐싱 (Redis)",
        "testStrategy": "1) 다양한 기간별 통계 정확성 검증, 2) 대량 데이터에서의 쿼리 성능 테스트, 3) 캐시 적중률 및 갱신 로직 테스트, 4) 시간대 변환 정확성 검증, 5) 엣지 케이스 (데이터 없음, 단일 데이터) 처리",
        "priority": "low",
        "dependencies": [],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "StatisticsService 확장 및 기본 분석 메소드 구현",
            "description": "기존 StatisticsService에 고급 분석을 위한 메소드들을 추가하고 기본 통계 계산 로직을 구현합니다.",
            "dependencies": [],
            "details": "1) StatisticsService 인터페이스에 고급 분석 메소드 정의 (getProductivityInsights, getCompletionTrends, getCategoryAnalysis), 2) 기본 통계 계산 로직 구현 (완료율, 평균 소요 시간, 생산성 지수), 3) 날짜 범위별 데이터 필터링 유틸리티 메소드 추가, 4) 통계 계산을 위한 DTO 클래스 정의",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "시간대별 생산성 패턴 분석 기능 구현",
            "description": "사용자의 시간대별 할일 완료 패턴을 분석하여 생산성 인사이트를 제공하는 기능을 구현합니다.",
            "dependencies": [
              1
            ],
            "details": "1) productivityByHour 메소드 구현으로 시간대별 완료 통계 계산, 2) PostgreSQL EXTRACT 함수를 활용한 시간대별 그룹핑, 3) 시간대별 완료 건수 및 완료율 계산, 4) 가장 생산적인 시간대 식별 로직, 5) 시간대별 평균 작업 시간 분석, 6) ProductivityPattern DTO 정의",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "카테고리별 상세 분석 기능 구현",
            "description": "카테고리별 완료율, 평균 소요 시간, 우선순위별 분포 등을 분석하는 기능을 구현합니다.",
            "dependencies": [
              1
            ],
            "details": "1) getCategoryAnalysis 메소드로 카테고리별 통계 계산, 2) 카테고리별 완료율 및 평균 소요 시간 분석, 3) 우선순위별 분포 및 완료 패턴 분석, 4) 카테고리별 성과 지표 계산, 5) CategoryAnalysis DTO 및 관련 통계 객체 정의, 6) 카테고리별 트렌드 변화 분석",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "트렌드 데이터 생성 및 윈도우 함수 활용 최적화",
            "description": "주간/월간 트렌드 차트 데이터를 생성하고 PostgreSQL 윈도우 함수를 활용하여 효율적인 집계를 구현합니다.",
            "dependencies": [
              2,
              3
            ],
            "details": "1) PostgreSQL 윈도우 함수(LAG, LEAD, ROW_NUMBER)를 활용한 효율적 트렌드 계산, 2) 주간/월간 완료 트렌드 데이터 생성, 3) 이전 기간 대비 증감률 계산, 4) 이동 평균(Moving Average) 계산으로 트렌드 스무딩, 5) TrendData DTO 및 차트 데이터 포맷 정의, 6) 성능 최적화된 복합 쿼리 작성",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Redis 캐싱 시스템 구축",
            "description": "분석 결과의 성능 향상을 위한 Redis 캐싱 시스템을 구축하고 캐시 전략을 구현합니다.",
            "dependencies": [
              4
            ],
            "details": "1) Redis 설정 및 CacheManager 구성, 2) 분석 결과별 캐시 키 전략 정의 (사용자별, 기간별), 3) @Cacheable 어노테이션을 활용한 자동 캐싱, 4) 할일 완료/수정 시 관련 캐시 무효화(@CacheEvict), 5) 캐시 TTL 설정 (1시간), 6) 캐시 워밍업 전략 구현",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "Analytics API 엔드포인트 구현 및 성능 최적화",
            "description": "고급 분석 데이터를 제공하는 REST API 엔드포인트를 구현하고 전체적인 성능을 최적화합니다.",
            "dependencies": [
              5
            ],
            "details": "1) GET /members/{id}/analytics 엔드포인트 구현, 2) 기간별 필터링 파라미터 지원 (startDate, endDate, period), 3) 페이지네이션 지원 및 응답 데이터 최적화, 4) API 응답 시간 모니터링 및 로깅, 5) 권한 검증 및 보안 강화, 6) OpenAPI 문서화 및 응답 예시 추가, 7) 에러 핸들링 및 예외 상황 처리",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 10,
        "title": "API 성능 최적화 및 모니터링",
        "description": "응답 시간 개선, 데이터베이스 쿼리 최적화, 모니터링 시스템 구축",
        "details": "1) Spring Boot Actuator로 헬스체크 및 메트릭 엔드포인트, 2) Micrometer + Prometheus 연동으로 메트릭 수집, 3) 권장 인덱스 생성 스크립트 실행, 4) N+1 쿼리 문제 해결 (fetch join, @EntityGraph), 5) Redis 캐싱 레이어 구현 (할일 목록, 통계), 6) Connection Pool 튜닝 (HikariCP), 7) Slow Query 로깅 및 알림",
        "testStrategy": "1) JMeter로 부하 테스트 (목표: <200ms 평균 응답), 2) 쿼리 실행 계획 분석, 3) 캐시 적중률 측정, 4) 동시 사용자 시뮬레이션, 5) 메모리 누수 및 GC 패턴 분석",
        "priority": "medium",
        "dependencies": [],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Spring Boot Actuator 설정 및 헬스체크 구현",
            "description": "Actuator 의존성 추가, 기본 엔드포인트 활성화, 커스텀 헬스 인디케이터 구현",
            "dependencies": [],
            "details": "spring-boot-starter-actuator 의존성 추가, application.yml에서 management.endpoints.web.exposure 설정, 데이터베이스와 외부 서비스용 커스텀 HealthIndicator 구현, 보안 설정으로 민감한 정보 보호",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Micrometer + Prometheus 메트릭 수집 시스템 구축",
            "description": "Prometheus 연동 설정, 커스텀 메트릭 정의, Grafana 대시보드 연동 준비",
            "dependencies": [
              1
            ],
            "details": "micrometer-registry-prometheus 의존성 추가, 비즈니스 메트릭 정의 (API 요청 수, 응답 시간, 에러율), @Timed 및 @Counted 어노테이션 적용, Prometheus scrape 엔드포인트 노출",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "데이터베이스 인덱스 최적화 및 쿼리 성능 개선",
            "description": "슬로우 쿼리 분석, 인덱스 생성 스크립트 작성, N+1 쿼리 문제 해결",
            "dependencies": [],
            "details": "현재 실행되는 쿼리 분석, 자주 사용되는 검색 조건에 대한 복합 인덱스 생성, @EntityGraph와 fetch join을 활용한 N+1 문제 해결, EXPLAIN ANALYZE로 쿼리 실행 계획 검증",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Redis 캐싱 레이어 구현",
            "description": "Redis 설정, 할일 목록과 통계 데이터 캐싱, 캐시 무효화 전략 구현",
            "dependencies": [
              3
            ],
            "details": "spring-boot-starter-data-redis 설정, @Cacheable과 @CacheEvict 어노테이션 적용, 할일 목록과 사용자 통계에 대한 캐싱 전략 수립, TTL 설정 및 캐시 적중률 모니터링",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "HikariCP 연결 풀 튜닝 및 최적화",
            "description": "데이터베이스 연결 풀 설정 최적화, 모니터링 메트릭 추가",
            "dependencies": [],
            "details": "HikariCP 설정 최적화 (maximumPoolSize, minimumIdle, connectionTimeout), 연결 풀 메트릭 노출, 리크 감지 설정, 데이터베이스 커넥션 라이프사이클 모니터링",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "구조화된 로깅 시스템 및 슬로우 쿼리 모니터링 구축",
            "description": "Logback 설정 최적화, 슬로우 쿼리 감지 및 알림 시스템 구현",
            "dependencies": [
              2
            ],
            "details": "JSON 형태의 구조화된 로깅 설정, JPA 슬로우 쿼리 로깅 활성화, 로그 레벨별 메트릭 수집, 에러 및 경고 로그에 대한 알림 시스템 구축",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "JMeter 부하 테스트 및 성능 검증",
            "description": "부하 테스트 시나리오 작성, 성능 목표 달성 검증, 최종 성능 리포트 생성",
            "dependencies": [
              4,
              5,
              6
            ],
            "details": "JMeter 테스트 플랜 작성 (동시 사용자 시뮬레이션), 평균 응답 시간 200ms 목표 달성 검증, 메모리 사용량 및 GC 패턴 분석, 성능 개선 전후 비교 리포트 작성",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-07-13T16:45:38.605Z",
      "updated": "2025-07-13T16:45:38.605Z",
      "description": "Tasks for master context"
    }
  }
}