{
	"meta": {
		"generatedAt": "2025-07-13T16:46:32.854Z",
		"tasksAnalyzed": 10,
		"totalTasks": 10,
		"analysisCount": 10,
		"thresholdScore": 5,
		"projectName": "Taskmaster",
		"usedResearch": true
	},
	"complexityAnalysis": [
		{
			"taskId": 1,
			"taskTitle": "이메일 알림 서비스 구현",
			"complexityScore": 7,
			"recommendedSubtasks": 6,
			"expansionPrompt": "Spring Boot Mail과 Thymeleaf를 활용한 이메일 서비스를 단계별로 구현하되, 인터페이스 설계, 구현체 개발, 템플릿 엔진 통합, 비동기 처리, 이력 관리, 테스트 코드 작성 순으로 세분화하여 각각을 독립적인 작업 단위로 분리하세요.",
			"reasoning": "이메일 서비스는 외부 시스템 연동, 템플릿 엔진, 비동기 처리 등 다양한 기술 스택이 결합된 중간 복잡도의 작업입니다. 각 구성 요소가 명확히 분리되어 있어 6개 정도의 서브태스크로 체계적으로 진행할 수 있습니다."
		},
		{
			"taskId": 2,
			"taskTitle": "데이터 검증 및 비즈니스 규칙 강화",
			"complexityScore": 6,
			"recommendedSubtasks": 5,
			"expansionPrompt": "Bean Validation 확장과 비즈니스 규칙을 단계적으로 구현하되, 커스텀 검증 어노테이션 개발, 비즈니스 규칙 서비스 구현, 글로벌 예외 처리기 개선, 다국어 메시지 설정, API 통합 테스트 순으로 나누어 진행하세요.",
			"reasoning": "검증 로직과 에러 처리는 애플리케이션 전반에 영향을 미치는 중요한 기능이지만, 각 단계가 비교적 독립적이고 표준화된 패턴을 따르므로 중간 복잡도로 평가됩니다."
		},
		{
			"taskId": 3,
			"taskTitle": "친구 시스템 도메인 모델 및 API 구현",
			"complexityScore": 8,
			"recommendedSubtasks": 7,
			"expansionPrompt": "친구 시스템을 도메인 모델부터 API까지 체계적으로 구현하되, 엔티티 및 enum 설계, 리포지토리 구현, 서비스 로직 개발, REST 컨트롤러 구현, 양방향 관계 처리, 알림 연동, 통합 테스트 순으로 단계별로 진행하세요.",
			"reasoning": "친구 시스템은 복잡한 양방향 관계와 상태 관리, 권한 검증 등이 필요한 고복잡도 기능입니다. 사용자 간의 관계를 안전하게 관리해야 하므로 신중한 설계와 충분한 테스트가 필요합니다."
		},
		{
			"taskId": 4,
			"taskTitle": "공유 할일 기능 구현",
			"complexityScore": 9,
			"recommendedSubtasks": 8,
			"expansionPrompt": "공유 할일 시스템을 단계별로 구현하되, 도메인 모델 설계, 연결 테이블 구현, 권한 검증 로직, 완료 합의 메커니즘, 서비스 레이어 구현, API 엔드포인트 개발, 알림 시스템 연동, 동시성 처리 및 테스트 순으로 진행하세요.",
			"reasoning": "공유 할일은 여러 사용자 간의 협업과 복잡한 비즈니스 로직(완료 합의, 권한 관리)을 포함하는 고복잡도 기능입니다. 동시성 이슈와 데이터 일관성 보장이 중요하므로 세심한 설계가 필요합니다."
		},
		{
			"taskId": 5,
			"taskTitle": "활동 피드 시스템 구현",
			"complexityScore": 7,
			"recommendedSubtasks": 6,
			"expansionPrompt": "이벤트 기반 활동 피드를 체계적으로 구현하되, 이벤트 모델 설계, 이벤트 발행 시스템 구축, 피드 서비스 구현, API 엔드포인트 개발, 읽음 상태 관리, 성능 최적화 및 테스트 순으로 진행하세요.",
			"reasoning": "활동 피드는 이벤트 기반 아키텍처와 실시간 데이터 처리가 필요한 중상급 복잡도의 기능입니다. Spring의 이벤트 시스템을 활용하지만 성능과 확장성을 고려한 설계가 중요합니다."
		},
		{
			"taskId": 6,
			"taskTitle": "챌린지 시스템 개선 및 리더보드 구현",
			"complexityScore": 9,
			"recommendedSubtasks": 8,
			"expansionPrompt": "챌린지 시스템과 실시간 리더보드를 단계적으로 구현하되, 챌린지 모델 확장, 마일스톤 시스템 구축, Redis 리더보드 구현, 실시간 업데이트 (WebSocket), 인증서 생성 기능, 스케줄러 구현, 성능 최적화, 통합 테스트 순으로 진행하세요.",
			"reasoning": "Redis, WebSocket, PDF 생성, 스케줄링 등 다양한 기술이 통합된 고복잡도 시스템입니다. 실시간 처리와 대용량 데이터 관리가 필요하므로 아키텍처 설계가 매우 중요합니다."
		},
		{
			"taskId": 7,
			"taskTitle": "업적 시스템 구현",
			"complexityScore": 8,
			"recommendedSubtasks": 7,
			"expansionPrompt": "확장 가능한 업적 시스템을 구축하되, 업적 도메인 모델 설계, 조건 인터페이스 및 구현체 개발, 이벤트 리스너 구현, 진행도 추적 로직, 보상 시스템 연동, API 개발, 자동화 테스트 순으로 체계적으로 진행하세요.",
			"reasoning": "업적 시스템은 복잡한 조건 로직과 이벤트 기반 자동 추적이 필요한 고복잡도 기능입니다. 확장 가능한 아키텍처 설계와 다양한 업적 조건에 대한 유연한 처리가 핵심입니다."
		},
		{
			"taskId": 8,
			"taskTitle": "연속 기록(Streak) 추적 시스템",
			"complexityScore": 6,
			"recommendedSubtasks": 5,
			"expansionPrompt": "연속 기록 추적 시스템을 단계별로 구현하되, 도메인 모델 설계, 연속 기록 업데이트 로직, 복구 메커니즘 구현, 보너스 계산 시스템, API 및 위젯 데이터 제공 순으로 진행하세요.",
			"reasoning": "시간 기반 로직과 복구 메커니즘이 포함된 중간 복잡도의 기능입니다. 날짜 계산과 시간대 처리가 핵심이지만, 비교적 단순한 비즈니스 로직으로 구성되어 있습니다."
		},
		{
			"taskId": 9,
			"taskTitle": "고급 통계 및 분석 기능",
			"complexityScore": 7,
			"recommendedSubtasks": 6,
			"expansionPrompt": "고급 분석 기능을 단계적으로 구현하되, 통계 서비스 확장, 시간대별 패턴 분석, 카테고리별 분석 구현, 트렌드 데이터 생성, 캐싱 시스템 구축, API 및 성능 최적화 순으로 진행하세요.",
			"reasoning": "복잡한 데이터 집계와 윈도우 함수, 캐싱 전략이 필요한 중상급 복잡도의 기능입니다. 데이터베이스 성능과 쿼리 최적화가 중요한 요소입니다."
		},
		{
			"taskId": 10,
			"taskTitle": "API 성능 최적화 및 모니터링",
			"complexityScore": 8,
			"recommendedSubtasks": 7,
			"expansionPrompt": "성능 최적화와 모니터링을 체계적으로 구현하되, Actuator 설정, Prometheus 연동, 데이터베이스 최적화, 캐싱 구현, 연결 풀 튜닝, 로깅 시스템 구축, 부하 테스트 및 성능 검증 순으로 진행하세요.",
			"reasoning": "다양한 모니터링 도구와 성능 최적화 기법이 결합된 고복잡도 작업입니다. 시스템 전반의 성능에 영향을 미치므로 신중한 접근과 충분한 테스트가 필요합니다."
		}
	]
}